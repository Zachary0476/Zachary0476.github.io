<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/17/hello-world/"/>
      <url>/2023/05/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/git%20reset%20--hard%20%E9%9C%80%E8%A6%81%E4%BF%9D%E7%95%99%E7%9A%84%E4%BF%AE%E6%94%B9%E6%B2%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9Fgit%20fsck%20--lost-found/"/>
      <url>/2023/05/17/git%20reset%20--hard%20%E9%9C%80%E8%A6%81%E4%BF%9D%E7%95%99%E7%9A%84%E4%BF%AE%E6%94%B9%E6%B2%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9Fgit%20fsck%20--lost-found/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/redis%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%92%8CmongoDB%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%AF%B9%E6%AF%94%EF%BC%88%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E4%BA%BA%E5%91%98%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%89/"/>
      <url>/2023/05/17/redis%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%92%8CmongoDB%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%AF%B9%E6%AF%94%EF%BC%88%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E4%BA%BA%E5%91%98%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%89%AB%E6%8F%8F%20---%E5%8A%A0%E5%AF%86%E4%BC%9A%E8%AF%9D%EF%BC%88SSL%EF%BC%89Cookie%20%E4%B8%AD%E7%BC%BA%E5%B0%91%20Secure%20%E5%B1%9E%E6%80%A7--node%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E5%8E%9F%E6%9D%A5%E6%98%AFSecure%EF%BC%9Atrue%E6%8C%96%E4%BA%86%E5%9D%91/"/>
      <url>/2023/05/17/web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%89%AB%E6%8F%8F%20---%E5%8A%A0%E5%AF%86%E4%BC%9A%E8%AF%9D%EF%BC%88SSL%EF%BC%89Cookie%20%E4%B8%AD%E7%BC%BA%E5%B0%91%20Secure%20%E5%B1%9E%E6%80%A7--node%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E5%8E%9F%E6%9D%A5%E6%98%AFSecure%EF%BC%9Atrue%E6%8C%96%E4%BA%86%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><strong>cookie中的Secure值的作用 ：</strong><br>该属性的作用是是否允许以https协议的方式传递cookie；（开启与否通过观察前后端交互的响应头中是否包含此字段即可：set-cookie）；</p><h2 id="出现原因分析："><a href="#出现原因分析：" class="headerlink" title="出现原因分析："></a>出现原因分析：</h2><p>你的网站站点中使用到https协议，但是你的node服务器是通过session和cookie的方式跟踪服务端与客户端会话状态的，且没设置或设置了cookie的secure属性为值false，那么就抛出了这个问题；</p><p><strong>强行解决带来的问题：</strong><br>把session中配置的secure属性值直接改成true，不做其他处理，会出现会话错误的问题，导致系统无法登陆；</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>我是通过我的node服务器解决的该问题：<br>var app &#x3D; express()<br>var sess &#x3D; {<br>  secret: ‘keyboard cat’,<br>  cookie: {}<br>}</p><p>if (app.get(‘env’) &#x3D;&#x3D;&#x3D; ‘production’) {<br>  app.set(‘trust proxy’, 1) &#x2F;&#x2F; trust first proxy   <strong>！！！官方要求添加这个字段后才能设置.cookie.secure &#x3D; true</strong><br>  sess.cookie.secure &#x3D; true &#x2F;&#x2F; serve secure cookies<br>}</p><p>app.use(session(sess))</p><p><em><strong>参考官方文档：<a href="https://www.npmjs.com/package/express-session">https://www.npmjs.com/package/express-session</a></strong></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E8%AF%84%E4%BC%B0%E9%97%AE%E9%A2%98%E4%B9%8B%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0(CRSF)--%E7%BC%BA%E5%B0%91referer%E6%A0%A1%E9%AA%8C%20AppScan%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C/"/>
      <url>/2023/05/17/web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E8%AF%84%E4%BC%B0%E9%97%AE%E9%A2%98%E4%B9%8B%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0(CRSF)--%E7%BC%BA%E5%B0%91referer%E6%A0%A1%E9%AA%8C%20AppScan%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%8Avue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D%E9%97%AE%E9%A2%98%E5%AE%9D%E5%85%B8%E3%80%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%BF%9D%E7%95%99%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
      <url>/2023/05/17/%E3%80%8Avue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D%E9%97%AE%E9%A2%98%E5%AE%9D%E5%85%B8%E3%80%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%BF%9D%E7%95%99%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>《vue项目 不显示滚动条保留滚动效果》</p><p>问题复现：<br>    错误的给父盒子手动改设置高度后，由于子盒子内容高度超出父盒子，浏览器巴巴自动让父盒子产生一条漂亮的滚动条，但是产品说它丑不想要，还得保留滚动效果。还要怎么办？怎么办？怎么办？</p><p>问题解决：<br>有时候为了美观或者简化页面效果，我们需要将滚动条隐藏，但又不影响滚动效果该怎么做，<br>示例：.class为父盒子的选择器名称<br>.class::-webkit-scrollbar {<br>        display: none;&#x2F;&#x2F;去掉滚动条，不能滚动了；<br>        width: 0;&#x2F;&#x2F;可以滚动，且滚动条不显示；<br>    }</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%20SRI%20%E6%8A%B5%E5%BE%A1%20CSP/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%20SRI%20%E6%8A%B5%E5%BE%A1%20CSP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-1%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-1%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-2%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-2%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-3%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-3%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-4%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-4%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-5%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-5%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-6%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E6%95%B4%E7%90%86%E5%88%86%E4%BA%AB-6%EF%BC%88%E5%85%B6%E5%AE%83%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%8F%AF%E6%9D%A5%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%9F%A5%E7%9C%8Bo%EF%BC%8C%E6%9C%89%E9%AB%98%E8%A7%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%86%E6%88%91%E5%93%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%8F%E5%BC%80%E5%8F%91-%E5%9C%A8webpack%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%BF%9B%E8%A1%8CMOCK%EF%BC%88mock%EF%BC%89-1%EF%BC%88%E5%85%A5%E9%97%A8%E7%BA%A7%EF%BC%89/"/>
      <url>/2023/05/17/%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%8F%E5%BC%80%E5%8F%91-%E5%9C%A8webpack%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%BF%9B%E8%A1%8CMOCK%EF%BC%88mock%EF%BC%89-1%EF%BC%88%E5%85%A5%E9%97%A8%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E6%8A%8Avue%E6%8E%B0%E7%A2%8E%E4%BA%86%E5%86%99%E4%B8%80%E5%86%99%20-%20-compiler/"/>
      <url>/2023/05/17/%E6%8A%8Avue%E6%8E%B0%E7%A2%8E%E4%BA%86%E5%86%99%E4%B8%80%E5%86%99%20-%20-compiler/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;create vue&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var tmp = document.querySelector(&quot;#root&quot;);</span><br><span class="line">      var data = &#123;</span><br><span class="line">        name: &quot;咬人的汪&quot;,</span><br><span class="line">        age: 18,</span><br><span class="line">      &#125;;</span><br><span class="line">      // vue源码也是用递归写的，不过此处我们仅考虑一个简单的compiler模板解析函数的实现，让我们一步一步来，我会持续更新的</span><br><span class="line">      const compiler = (template, data) =&gt; &#123;</span><br><span class="line">        let childNodes = template.childNodes; </span><br><span class="line">        const bracketsReg = /\&#123;\&#123;.+?\&#125;\&#125;/g; // 使用正则表达式的懒惰模式把模板内容挑出来，考虑一个文本内容里面放多个&#123;&#123;xxx&#125;&#125;内容；如果对正则不太熟悉，动动小手 百度一下</span><br><span class="line">        for (let i = 0; i &lt; childNodes.length; i++) &#123;</span><br><span class="line">          let type = childNodes[i].nodeType;</span><br><span class="line">          if (type === 1) &#123;</span><br><span class="line">            compiler(childNodes[i], data);</span><br><span class="line">          &#125; else if (type === 3) &#123;</span><br><span class="line">            let txt = childNodes[i].nodeValue;</span><br><span class="line">            txt = txt.replace(bracketsReg, function (val) &#123;</span><br><span class="line">              let key = val.replace(/(\&#123;|\&#125;)/g, &quot;&quot;).trim();</span><br><span class="line">              let value = data[key];</span><br><span class="line">              return value;</span><br><span class="line">            &#125;);</span><br><span class="line">            childNodes[i].nodeValue = txt;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      let generateNodes = tmp.cloneNode(true); // 这里copy一下，免得把原本的元素整没喽</span><br><span class="line">      compiler(tmp, data); // ，vue会自动帮我们把解析后的元素替换掉原来的内容，包括原来的元素；</span><br><span class="line">      console.log(generateNodes);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97(Fibonacci)%20%E6%95%B0%E5%88%97%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/17/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97(Fibonacci)%20%E6%95%B0%E5%88%97%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ol><li>前端斐波那契数列是啥？<br> Fibonacci就是一段拥有特殊关系的数字，如1,1,2,3,5,8,13,21…有没有发现这段数字很好玩（一般约定范围正整数）：<br> Fn &#x3D; F(n - 1) + F(n-2) （n&gt;&#x3D;2，n∈N*） （n为索引）<br> 这就是斐波那契数列</li></ol><p>2.这里面蕴含了哪些基本的前端知识点？</p><h2 id="递归求Fn："><a href="#递归求Fn：" class="headerlink" title="递归求Fn："></a>递归求Fn：</h2><p>**执行效率：<br><img src="https://img-blog.csdnimg.cn/20201208162707730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>function Fibonacci(n){<br>    if(n &#x3D;&#x3D;&#x3D; 1 || n &#x3D;&#x3D;&#x3D; 2)  return 1<br>    return Fibonacci(n-1) + Fibonacci(n-2)<br>}<br> Fibonacci(30)<br><strong>递归优化方法：</strong><br>**执行效率：<br><img src="https://img-blog.csdnimg.cn/2020120816274665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>function fibonacci() {<br>    let sum &#x3D; [0, 1, 1]<br>    return function fib(n) {<br>        if (sum[n] &#x3D;&#x3D;&#x3D; undefined) {<br>            sum[n] &#x3D; fib(n - 1) + fib(n - 2)<br>        }<br>        return sum[n]<br>    }<br>}<br>fibonacci()(30)</p><h2 id="循环-数组解构方法："><a href="#循环-数组解构方法：" class="headerlink" title="循环+数组解构方法："></a>循环+数组解构方法：</h2><p>**执行效率：<br><img src="https://img-blog.csdnimg.cn/20201208162852611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>function fibonacci(n) {<br>    var n1 &#x3D; 1, n2 &#x3D; 1<br>    for (let i &#x3D; 2; i &lt; n; i++) {<br>        [n1, n2] &#x3D; [n2, n1 + n2]<br>    }<br>    return n2<br>}<br>fibonacci(30)</p><p>个人总结：在执行效率上，n小的时候执行时间差不多，但是n变大以后，第一种方式的劣势就表现出来了，优化后的递归方法和循环结构的方法优势就显示出来了，其实最主要的区别就是是否包含重复运算，递归中的闭包作用就是把算好的数值留存下来，同样，循环的方式是用叠加的方式把数值记录下来，一次运算结束时销毁；<br>参考链接：<a href="http://www.cnblogs.com/superlizhao/p/11603158.html">www.cnblogs.com/superlizhao/p/11603158.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%AD%E7%9A%84referer%20host/"/>
      <url>/2023/05/17/%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%AD%E7%9A%84referer%20host/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/@%E5%AD%98%E4%B8%80%E6%9C%ACgit%E5%B7%A5%E5%85%B7%E4%B9%A6@/"/>
      <url>/2023/05/17/@%E5%AD%98%E4%B8%80%E6%9C%ACgit%E5%B7%A5%E5%85%B7%E4%B9%A6@/</url>
      
        <content type="html"><![CDATA[<p><a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/VUE%202.x%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/05/17/VUE%202.x%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="先把结果展示出来：-整个实现的源代码在下面，拿去试试"><a href="#先把结果展示出来：-整个实现的源代码在下面，拿去试试" class="headerlink" title="先把结果展示出来：(整个实现的源代码在下面，拿去试试)"></a>先把结果展示出来：(整个实现的源代码在下面，拿去试试)</h1><p><img src="https://img-blog.csdnimg.cn/20210120132343518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120133120915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      let ARRAY_METHODS = [</span><br><span class="line">        &quot;push&quot;,</span><br><span class="line">        &quot;pop&quot;,</span><br><span class="line">        &quot;shift&quot;,</span><br><span class="line">        &quot;unshift&quot;,</span><br><span class="line">        &quot;reverse&quot;,</span><br><span class="line">        &quot;sort&quot;,</span><br><span class="line">        &quot;splice&quot;,</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      //   此方法仍然无法解决操作数组长度length属性的响应式问题 vue3的proxy 可以解决  替代方法：splice(0)</span><br><span class="line">      let array_methods = Object.create(Array.prototype);</span><br><span class="line">      ARRAY_METHODS.forEach((method) =&gt; &#123;</span><br><span class="line">        array_methods[method] = function () &#123;</span><br><span class="line">          console.log(`当前正在使用的是拦截后的方法：$&#123;method&#125;`);</span><br><span class="line">          for (var i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">            reactify(arguments[i]);</span><br><span class="line">          &#125;</span><br><span class="line">          let res = Array.prototype[method].apply(this, arguments);</span><br><span class="line">          return res;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 劫持数据</span><br><span class="line">      function defineReactive(target, key, value, enumerable) &#123;</span><br><span class="line">        Object.defineProperty(target, key, &#123;</span><br><span class="line">          configurable: true,</span><br><span class="line">          enumerable: !!enumerable,</span><br><span class="line">          get() &#123;</span><br><span class="line">            console.log(`读取$&#123;key&#125;属性当前值为$&#123;value&#125;`);</span><br><span class="line">            return value;</span><br><span class="line">          &#125;,</span><br><span class="line">          set(newVal) &#123;</span><br><span class="line">            console.log(`设置$&#123;key&#125;属性，改为:$&#123;newVal&#125;`);</span><br><span class="line">            value = newVal;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //  数据响应式化处理</span><br><span class="line">      function reactify(o) &#123;</span><br><span class="line">        let keys = Object.keys(o);</span><br><span class="line">        for (var i = 0; i &lt; keys.length; i++) &#123;</span><br><span class="line">          let key = keys[i];</span><br><span class="line">          let val = o[key];</span><br><span class="line">          if (Array.isArray(o[key])) &#123;</span><br><span class="line">            val.__proto__ = array_methods; // 使用前文中的js劫持策略且只重写需要要改为响应式数组的原型方法 </span><br><span class="line">            for (var j = 0; j &lt; val.length; j++) &#123;</span><br><span class="line">              reactify(val[j]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            defineReactive(o, key, val, true); // 数据劫持并响应式处理</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //   数据源</span><br><span class="line">      let data = &#123;</span><br><span class="line">        name: &quot;zachary&quot;,</span><br><span class="line">        age: 18,</span><br><span class="line">        hobits: [&#123; title: &quot;爬山&quot; &#125;, &#123; title: &quot;游泳&quot; &#125;, &#123; title: &quot;电子游戏&quot; &#125;],</span><br><span class="line">      &#125;;</span><br><span class="line">      reactify(data);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/VUE%20%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/"/>
      <url>/2023/05/17/VUE%20%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>模板字符串转换成&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;虚拟DOM（vnode）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot; data-attr=&quot;hahah&quot;&gt;</span><br><span class="line">      一级</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        二级</span><br><span class="line">        &lt;div&gt;三级&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 用于生成vnode的对象的类 --VNode类</span><br><span class="line">      class VNode &#123;</span><br><span class="line">        constructor(tag, data, value, type) &#123;</span><br><span class="line">          this.tag = tag ? tag.toLowerCase() : tag;</span><br><span class="line">          this.data = data;</span><br><span class="line">          this.value = value;</span><br><span class="line">          this.type = type;</span><br><span class="line">          this.children = [];</span><br><span class="line">        &#125;</span><br><span class="line">        appendChild(node) &#123;</span><br><span class="line">          this.children.push(node);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 解析器函数 --简化版</span><br><span class="line">      function compiler(node) &#123;</span><br><span class="line">        let nodeType = node.nodeType;</span><br><span class="line">        let _vnode = null;</span><br><span class="line">        if (nodeType === 1) &#123;</span><br><span class="line">          let attrs = node.attributes;</span><br><span class="line">          let obj = &#123;&#125;;</span><br><span class="line">          for (let i = 0; i &lt; attrs.length; i++) &#123;</span><br><span class="line">            obj[attrs[i].nodeName] = attrs[i].nodeValue;</span><br><span class="line">          &#125;</span><br><span class="line">          _vnode = new VNode(node.nodeName, obj, undefined, nodeType);</span><br><span class="line">          let childNodes = node.childNodes;</span><br><span class="line">          for (let i = 0; i &lt; childNodes.length; i++) &#123;</span><br><span class="line">            _vnode.appendChild(compiler(childNodes[i]));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else if (nodeType === 3) &#123;</span><br><span class="line">          _vnode = new VNode(undefined, undefined, node.nodeValue, nodeType);</span><br><span class="line">        &#125;</span><br><span class="line">        return _vnode;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(compiler(document.getElementById(&quot;root&quot;)));</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行效果如下：<br><img src="https://img-blog.csdnimg.cn/20210106142440988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写一个根据路径获取对象路径的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">          b: &#123;</span><br><span class="line">            c: &#123;</span><br><span class="line">              d: 1,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"> function getPropsByPath(obj, path) &#123;</span><br><span class="line">        let keys = path.split(&quot;.&quot;);</span><br><span class="line">        let targetObj = obj;</span><br><span class="line">        let prop;</span><br><span class="line">        while ((prop = keys.shift())) &#123;</span><br><span class="line">          if (!targetObj[prop]) &#123;</span><br><span class="line">            alert(`属性：$&#123;prop&#125; 不存在`);</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">          targetObj = targetObj[prop];</span><br><span class="line">        &#125;</span><br><span class="line">        return targetObj;</span><br><span class="line"> &#125;</span><br><span class="line">console.log(getPropsByPath(obj, &quot;a.b.c.d&quot;));</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 把虚拟dom转换成真实dom<br> function parseVNode(vnode) {<br>   let type &#x3D; vnode.type;<br>   let data &#x3D; vnode.data;<br>   let realDom &#x3D; null;<br>   if (type &#x3D;&#x3D;&#x3D; 1) {<br>     realDom &#x3D; document.createElement(vnode.tag);<br>     if (data) {<br>       for (let k in data) {<br>         realDom.setAttribute(k, data[k]);<br>       }<br>     }<br>     if (vnode.children &amp;&amp; 0 in vnode.children) {<br>       for (let i &#x3D; 0; i &lt; vnode.children.length; i++) {<br>         realDom.appendChild(parseVNode(vnode.children[i]));<br>       }<br>     }<br>   } else if (type &#x3D;&#x3D;&#x3D; 3) {<br>     return document.createTextNode(vnode.value);<br>   }<br>   return realDom;<br> }<br>console.log(parseVNode(compiler(document.getElementById(“root”))));</p><p><img src="https://img-blog.csdnimg.cn/2021010615335485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/javascript%20%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
      <url>/2023/05/17/javascript%20%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>字符串：</p><p>1-str.length</p><p>2-str.indexOf()</p><p>3-str.lastIndexOf()</p><p>4-str.search()</p><p>5-str.slice(start,end) &#x2F;&#x2F; 接受负值</p><p>6-str.substring(start,end)</p><p>7-str.substr(start,length）</p><p>8-str.replace(target, new)</p><p>9-str.toUpperCase()</p><p>10-str.toLowerCase()</p><p>11-str1.concat(str2,str3,str4,…)</p><p>12-str.trim() &#x2F;&#x2F; 去掉两边的空格</p><p>13-str.charAt（索引）</p><p>14-str.split(‘’)</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>数组：</p><p>1.arr.toString() &#x2F;&#x2F; 以逗号分隔；</p><p>2.arr.join() &#x2F;&#x2F; 自定义分割后的字符串分割字符；</p><p>3.arr.pop()&#x2F;shift()  &#x2F;&#x2F; 在数组最后删除一个元素,返回删掉的元素，改变原数组；</p><p>4.arr.push()&#x2F;unshift()  &#x2F;&#x2F; 返回新数组的长度；</p><p>5.length</p><p>6.delete arr[0]  &#x2F;&#x2F; 直接删除某个元素，但是会导致数组闪电元素的位置产生一个empty坑位</p><p>7.arr.splice(新元素被添加的位置，删除多少个元素， 其他参数是即将插入的元素) &#x2F;&#x2F; 拼接数组时第二个参数设为0或删除数组元素然后添加</p><p>8.arr.concat()  &#x2F;&#x2F; 返回新数组</p><p>9.arr.slice(start,end) </p><p>10.数组排序、查找最大值最小值；</p><p>11.Array.isArray()</p><p>12.arr.reverse() &#x2F;&#x2F; 数组翻转</p><p>13.arr.sort() &#x2F;&#x2F; 排序</p><p>14.arr.some()&#x2F;every()</p><p>15.arr.filter() &#x2F; forEach&#x2F;map</p><p>16.arr.reduce()</p><p>17.new Array()</p><p>18.array.isArray</p><p>19.array.fill()</p><p>20.new Set()  &#x2F;&#x2F;类数组的使用</p><p>21.arr.flat（1） &#x2F;&#x2F; 数组降维</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>对象：</p><p>1.Object.assgin（） &#x2F;&#x2F; 浅拷贝</p><p>2.Object.create() &#x2F;&#x2F; 创建对象</p><p>3.Object.entries() &#x2F;&#x2F; 返回一个包含[key, value]给定对象自己的可枚举字符串属性的所有对的数组。</p><p>4.Object.freeze()  &#x2F;&#x2F; 冻结对象</p><p>5.JSON.parse()</p><p>6.JSON.stringify()</p><p>5.Object.keys() &#x2F;&#x2F; 可枚举属性集合；</p><p>6.Object.values() &#x2F;&#x2F; 可枚举属性值得集合</p><p>7.new Map() &#x2F;&#x2F;类对象的使用</p><p>8.delete obj.key &#x2F;&#x2F; 删掉某个键值对 不会留下empty坑</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>其他方法</p><p>1.for…in</p><p>2.for…of  &#x2F;&#x2F;可以正确响应break、continue和return语句&#x2F;可以迭代set map 集合</p><p>二者区别：<br>    1–for … of遍历获取的是对象的键值,for … in 获取的是对象的键名<br>    2–for … in会遍历对象的整个原型链,性能非常差不推荐使用,而for … of只遍历当前对象不会遍历原型链<br>    3–对于数组的遍历,for … in会返回数组中所有可枚举的属性(包括原型链上可枚举的属性),for … of只返回数组的下标对应的属性值</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/node_%20express%20+%20session%20+%20cookie%E7%9A%84%E9%89%B4%E6%9D%83%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/05/17/node_%20express%20+%20session%20+%20cookie%E7%9A%84%E9%89%B4%E6%9D%83%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>一、准备工作：<br>1.本地安装redis库，我用的是菜鸟教程–提供的git连接上的 ‘Redis-x64-5.0.10.zip’版本；<br>2.安装好redis没问题后，跑起来别关<strong>cmd窗口</strong>；<br>3.创建程序如下：<br>备注：session.js和redis.js放在同一个文件夹config下管理的；</p><p><strong>创建express服务器： app.js文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 引入创建模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const session = require(&#x27;./config/session&#x27;)</span><br><span class="line">// 辅助模块</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const badyParser = require(&#x27;body-parser&#x27;)</span><br><span class="line">// 使用redis</span><br><span class="line">// const redis = require(&#x27;./config/redis&#x27;)</span><br><span class="line">// 创建服务器</span><br><span class="line">const app = express()</span><br><span class="line">const server = http.createServer(app)</span><br><span class="line">// 解析</span><br><span class="line">app.use(express.static(path.join(__dirname, &#x27;../views/dist&#x27;)))</span><br><span class="line">app.use(badyParser.json(&#123; limit: &#x27;1024kb&#x27; &#125;))</span><br><span class="line">app.use(badyParser.urlencoded(&#123; extended: true, limit: &#x27;1024kb&#x27; &#125;))</span><br><span class="line">// session</span><br><span class="line">app.use(session)</span><br><span class="line"></span><br><span class="line">// 后端路由配置</span><br><span class="line">// app.use(&#x27;/server&#x27;, require(&#x27;./routers&#x27;))</span><br><span class="line">app.use(&#x27;/login&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">req.session.userinfo = &#x27;唐三&#x27;</span><br><span class="line">res.send(&#x27;登录成功&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/record&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">res.send(`$&#123;req.session.userinfo&#125; 欢迎回来！！`)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(&#x27;/destory&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">console.log(1, req.session.userinfo)</span><br><span class="line">req.session.destroy(err =&gt; &#123;</span><br><span class="line">console.log(err)</span><br><span class="line">res.send(&#x27;退出成功&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 错误处理中间件</span><br><span class="line">app.use(&#x27;*&#x27;, (err, req, res, next) =&gt; &#123;</span><br><span class="line">res.status(500).send(&#x27;服务器正忙&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 跑起来</span><br><span class="line">server.listen(8686, () =&gt; &#123;</span><br><span class="line">console.log(&#x27;Server is running at http://localhost:8686&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建session.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const session = require(&#x27;express-session&#x27;)</span><br><span class="line">const uid = require(&#x27;uid-safe&#x27;)</span><br><span class="line">const RedisStore = require(&#x27;connect-redis&#x27;)(session)</span><br><span class="line">const client = require(&#x27;./redis&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = session(&#123;</span><br><span class="line">genid: req =&gt; uid.sync(18) + req.body.name,</span><br><span class="line">secret: &#x27;zacahry&#x27;,</span><br><span class="line">resave: false,</span><br><span class="line">saveUninitialized: false,</span><br><span class="line">rolling: true,</span><br><span class="line">cookie: &#123;</span><br><span class="line">secure: false,</span><br><span class="line">maxAge: 5 * 60 * 1000,</span><br><span class="line">httpOnly: true,</span><br><span class="line">sameSite: true</span><br><span class="line">&#125;,</span><br><span class="line">store: new RedisStore(&#123;</span><br><span class="line">client: client,</span><br><span class="line">host: &quot;127.0.0.1&quot;,</span><br><span class="line">port: 6379</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建redis.js文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const redis = require(&quot;redis&quot;)</span><br><span class="line"></span><br><span class="line">const client = redis.createClient(&#123;</span><br><span class="line">password: &#x27;在你准备的本地redis.conf中，requirepass 的值，不设置也行&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">client.on(&#x27;connect&#x27;, _ =&gt; &#123;</span><br><span class="line">console.log(&#x27;redis连接成功！&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">client.on(&quot;error&quot;, function (error) &#123;</span><br><span class="line">console.error(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = client</span><br></pre></td></tr></table></figure><p><strong>二、测试步骤</strong><br>1.redis库和程序跑起来后，在浏览器上输入<br><a href="http://localhost:8686/login">http://localhost:8686/login</a><br>结果：<br><img src="https://img-blog.csdnimg.cn/20210126163853931.png" alt="在这里插入图片描述"><br>访问：<a href="http://localhost:8686/record">http://localhost:8686/record</a><br>结果：<br><img src="https://img-blog.csdnimg.cn/2021012616391298.png" alt="在这里插入图片描述"><br>访问：<a href="http://localhost:8686/destory">http://localhost:8686/destory</a><br>结果：<br><img src="https://img-blog.csdnimg.cn/20210126164002978.png" alt="在这里插入图片描述"><br><strong>测试说明及结果验证说明：当前cookie设置有限期为5分钟，login以后&#x3D;&#x3D;五分钟内通过record可以正常获取到‘唐三’欢迎回来！！‘  5分钟后由于cookie失效的问题或者5分钟内执行过destory操作，页面反馈变成“undefined 欢迎回来！！” 说明此事cookie已经失效，测试成功！！</strong></p><p>版权声明：技术乐在分享，如转载或使用本文内容，请附上本文链接。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/nohup%E5%92%8C&amp;%20%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/17/nohup%E5%92%8C&amp;%20%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>常规两种关闭运行程序的方式：</p><p>SIGHUP ：该信号是在用户终端连接(正常或非正常)结束时发出；<br>（就是断开终端）<br>SIGINT ： 程序终止信号, 在用户键入INTR字符时发出，用于通知前台进程组终止进程。<br>（就是ctrl + C）</p><p>nohup：退出终端连接不会导致程序终止，ctrl + C不受影响，会关闭程序；</p><p>&amp;       ：Ctrl + C 不会终止程序，断开终端不受影响，会关闭程序；</p><p>一般线上使用都是把以上两种方式组合起来使用，例如跑一个node服务器：<br>就这样写&#x3D;&#x3D;&gt;</p><p>nohup node app.js &amp;</p><table><td bgcolor=yellow> <font color=##FF0000 size=5>特别注意：此时直接退出终端还是会打断程序运行状态，应该用exit退出（ctrl+c不受影响的）</table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/robot%203T%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%20%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%9B%86%E5%90%88%E4%BB%A5%E5%8F%8A%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/05/17/robot%203T%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%20%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%9B%86%E5%90%88%E4%BB%A5%E5%8F%8A%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>实际操作步骤：</p><p>1.在Database上鼠标右键 选择‘Open Shell’；</p><p>2.先检查当前Database中有哪些集合： 命令行键入 ‘ show collections ’  F5或Ctrl+enter查看所有集合名称；</p><p>3.删除不想要的集合：键入 ‘db.集合名称.drop()’  F5或Ctrl+enter 窗口返回true 意为删除成功；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%87%BD%E6%95%B0%E5%90%88%E6%88%90%E4%B8%8E%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2023/05/17/%E5%87%BD%E6%95%B0%E5%90%88%E6%88%90%E4%B8%8E%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>函数是编程中，有两个重要的概念：</p><p><strong>即合成与柯里化</strong>；</p><p><strong>合成：</strong><br>    <strong>前提：</strong> 这些被合成的函数必须是纯粹的函数且函数只接受一个参数，不然会造成很多麻烦的问题，增加合成复杂度*<br>    <strong>理解：</strong> 在处理初始数据A&#x3D;&gt;目标数据B的过程中，涉及到多个处理关系的函数，此时，可以把这多个函数合并成一个函数，这就是合成；</p><p><strong>柯里化：</strong><br>     <strong>理解：</strong> 因为合成进行的不成文前提是默认接受一个参数，于是，为了解决这个问题，就有了柯里化的概念，就是把多参函数转换成单参函数，如下：</p><hr><p><em>参考链接：<a href="http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html">http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html</a></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%88%86%E4%BA%AB%20%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%20DOM%20API%20%20%20toggleAttribute%EF%BC%88==setAttribute%20%E5%92%8C%20removeAttribute%EF%BC%89/"/>
      <url>/2023/05/17/%E5%88%86%E4%BA%AB%20%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%20DOM%20API%20%20%20toggleAttribute%EF%BC%88==setAttribute%20%E5%92%8C%20removeAttribute%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>用于切换设置属性的API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;input id=&quot;input&quot; type=&quot;text&quot; /&gt;&lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, (_) =&gt; &#123;</span><br><span class="line">       let res = document.getElementById(&quot;input&quot;).toggleAttribute(&quot;disabled&quot;);</span><br><span class="line">       console.log(res); // 它是有返回值的 true和false</span><br><span class="line">      &#125;); </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.zhangxinxu.com/wordpress/2020/12/js-toggleattribute-dom-api/">https://www.zhangxinxu.com/wordpress/2020/12/js-toggleattribute-dom-api/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%A4%87%E4%BB%BD%E4%B8%80%E6%9D%A1mongodb%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%8D%E8%B4%9F%E8%B4%A3%E4%BB%BB%E7%9A%84%E8%AF%B4%EF%BC%89/"/>
      <url>/2023/05/17/%E5%A4%87%E4%BB%BD%E4%B8%80%E6%9D%A1mongodb%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%8D%E8%B4%9F%E8%B4%A3%E4%BB%BB%E7%9A%84%E8%AF%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>mongoexport –host&#x3D;xxxx.xxx.xxx –port&#x3D;27017 -u 账户 -p 密码 -d 库名称 -c 集合名 -q “{code:{‘$gte’:0}}” –type&#x3D;csv  –fields&#x3D;_id,meta.createAt,meta.updateAt,apis,pId,name,code,rank,sort,state,_v,router -o \testa\auth.csv</p><p>注意：–q ：“{}” 导出空数据表 JSON内容不要带空格；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E6%89%8B%E5%86%99VNode%EF%BC%88%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%EF%BC%89%20%E5%9F%BA%E4%BA%8E%E9%80%92%E5%BD%92%20%20%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C%20%E8%8E%B7%E5%8F%96%E6%A0%B9%E5%85%83%E7%B4%A0%E5%8F%8A%E5%85%B6%E6%89%80%E6%9C%89%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%B9%B6%E4%BF%9D%E5%AD%98%E6%88%90jsVNode%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/05/17/%E6%89%8B%E5%86%99VNode%EF%BC%88%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%EF%BC%89%20%E5%9F%BA%E4%BA%8E%E9%80%92%E5%BD%92%20%20%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C%20%E8%8E%B7%E5%8F%96%E6%A0%B9%E5%85%83%E7%B4%A0%E5%8F%8A%E5%85%B6%E6%89%80%E6%9C%89%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%B9%B6%E4%BF%9D%E5%AD%98%E6%88%90jsVNode%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;create vue&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"> // 创建VNode 同来创建_vnode实例</span><br><span class="line">      class VNode &#123;</span><br><span class="line">        constructor(tag, data, value, type) &#123;  // 此处定义tag 标签 data 属性 value 文本节点值 type 节点类型</span><br><span class="line">          this.tag = tag &amp;&amp; tag.toLowerCase();</span><br><span class="line">          this.data = data;</span><br><span class="line">          this.value = value;</span><br><span class="line">          this.type = type;</span><br><span class="line">          this.children = [];</span><br><span class="line">        &#125;</span><br><span class="line">        // 该方法用于把所有的子节点都存到根元素的VNode中</span><br><span class="line">        appendChild(vnode) &#123;</span><br><span class="line">          this.children.push(vnode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">//获把真实dom元素转换成虚拟dom</span><br><span class="line">      function getVNode(node) &#123;</span><br><span class="line">        let nodeType = node.nodeType;</span><br><span class="line">        let _vnode = null;</span><br><span class="line">        if (nodeType === 1) &#123; 节点类型===1 该节点为元素</span><br><span class="line">          let nodeName = node.nodeName;</span><br><span class="line">          let attrs = node.attributes; // 节点属性是一个伪数组 下面是为了把为数组转换成对象 后续将值存在data中</span><br><span class="line">          let _attrObj = &#123;&#125;;</span><br><span class="line">          for (let i = 0; i &lt; attrs.length; i++) &#123;</span><br><span class="line">            _attrObj[attrs[i].nodeName] = attrs[i].nodeValue;</span><br><span class="line">          &#125;</span><br><span class="line">          _vnode = new VNode(nodeName, _attrObj, undefined, nodeType);</span><br><span class="line">          let childNodes = node.childNodes;</span><br><span class="line">          for (let i = 0; i &lt; childNodes.length; i++) &#123;</span><br><span class="line">            _vnode.appendChild(getVNode(childNodes[i]));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else if (nodeType === 3) &#123; // 节点类型===3 该节点为文本</span><br><span class="line">          _vnode = new VNode(undefined, undefined, node.nodeValue, nodeType);</span><br><span class="line">        &#125;</span><br><span class="line">        return _vnode;</span><br><span class="line">      &#125;</span><br><span class="line">      var tmp = document.querySelector(&quot;#root&quot;);</span><br><span class="line">      let vroot = getVNode(root);</span><br><span class="line">      console.log(vroot);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E6%8B%BF%E5%88%B0%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%20%E6%A0%B9%E6%8D%AE%E5%AD%90%E9%A1%B9%EF%BC%88%E5%AF%B9%E8%B1%A1%EF%BC%89--%E6%97%B6%E9%97%B4%E5%AD%97%E7%AC%A6%E4%B8%B2--%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/05/17/%E6%8B%BF%E5%88%B0%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%20%E6%A0%B9%E6%8D%AE%E5%AD%90%E9%A1%B9%EF%BC%88%E5%AF%B9%E8%B1%A1%EF%BC%89--%E6%97%B6%E9%97%B4%E5%AD%97%E7%AC%A6%E4%B8%B2--%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>描述：很多时候，前端会拿到[{time:‘2020-10-10’},{time:‘2020-10-11’},{time:‘2020-10-12’}…]类似的数据，然后去渲染页面，但是需求中要求升序或者降序渲染：<br>既有如下方法：结合Array.sort() 使用<br>Array.sort(getTimeSortByObjPropUp（‘排序依据的属性’）)：<br>说明：因为array.sort(func)<br>sort 方法需要传入一个函数 like：<br>function(a, b)  {<br>    return a - b<br>}<br>下面的处理方法在此基础上进行升级，用闭包处理后再加入到sort方法中，一次来完成对象数组，按子项的某个属性进行排序的功能；</p><p>（一下方法适合处理以时间字符串属性为依据的排序，如果是依据其他值类型 ，稍作修改a和b即可实现）<br>export const getTimeSortByObjPropUp &#x3D; (key) &#x3D;&gt; {<br>  return (ahead, behind) &#x3D;&gt; { &#x2F;&#x2F;ahead 前一个对象 behind后一个对象<br>    let a &#x3D; +new Date(ahead[key])<br>    let b &#x3D; +new Date(behind[key])<br>    return b - a<br>  }<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E6%96%B0%E7%89%88%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%94%9F%E7%9A%84observer/"/>
      <url>/2023/05/17/%E6%96%B0%E7%89%88%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%94%9F%E7%9A%84observer/</url>
      
        <content type="html"><![CDATA[<p><strong>观察器：</strong></p><p><strong>Intersection Observer，交叉观察者。<br>Mutation Observer，变动观察者。<br>Resize Observer，视图观察者。<br>Performance Observer，性能观察者。</strong></p><p>参考及后续学习地址：<a href="https://blog.csdn.net/qiwoo_weekly/article/details/102791689">https://blog.csdn.net/qiwoo_weekly/article/details/102791689</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E7%94%A8%E9%80%92%E5%BD%92%E6%96%B9%E5%BC%8F%E6%9F%A5%E6%89%BE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%8F%8A%E6%95%B0%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
      <url>/2023/05/17/%E7%94%A8%E9%80%92%E5%BD%92%E6%96%B9%E5%BC%8F%E6%9F%A5%E6%89%BE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%8F%8A%E6%95%B0%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>请按需调整输出结果：</strong></p><p>let str &#x3D; ‘abcabcacbbbbacabbvvvccccccccccccccccccccccaavbaaaaaab’ &#x2F;&#x2F; 测试案例<br>getHighestFrequencyStr(str, ‘’, 0) &#x2F;&#x2F;输出–”最多出现的字符：c，共出现26次”</p><p>function getHighestFrequencyStr(str, target, count) {<br>    let t &#x3D; str.match(new RegExp(<code>$&#123;str.charAt(0)&#125;</code>, ‘g’)).length &#x2F;&#x2F; 获取第一种字符数量<br>    let NStr &#x3D; str.replace(new RegExp(<code>$&#123;str.charAt(0)&#125;</code>, ‘g’), ‘’) &#x2F;&#x2F; 不改变源字符串前提下把已查字符去掉后再查询<br>    if (t &gt; count) {<br>        count &#x3D; t<br>        target &#x3D; str.charAt(0)<br>    }<br>    if (NStr) { &#x2F;&#x2F; 通过递归的方式减少重复查找并提升性能<br>        return getHighestFrequencyStr(NStr, target, count)<br>    }<br>    return <code>最多出现的字符：$&#123;target&#125;，共出现$&#123;count&#125;次</code><br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%95%88%E4%BB%BFVUE%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%B8%BAhtml%E6%A0%87%E7%AD%BE%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2023/05/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%95%88%E4%BB%BFVUE%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%B8%BAhtml%E6%A0%87%E7%AD%BE%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>假如，你需要检测一批标签是否为html标签，可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let tags = &quot;div,p,a,img,ul,li,i,br&quot;.split(&quot;,&quot;); // 限定范围</span><br><span class="line">function makeMap(tag) &#123; // 检测方法</span><br><span class="line">  let map = new Map();</span><br><span class="line">  tags.forEach((item) =&gt; (map[item] = true));</span><br><span class="line">  return function (tagName) &#123;</span><br><span class="line">    return !!map[tagName.toLowerCase()]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">let isHtmlTag = makeMap( tags )</span><br><span class="line">isHtmlTag( &#x27;div&#x27; )</span><br></pre></td></tr></table></figure><p>分析：该方法应用到了js的函数柯里化概念（js的函数柯里化：简单理解就是把一个接受多参数的函数写成只接受一个原函数第一个参数，且返回一个接受剩余参数的新函数的玩法）<br>好处：此处如果使用常规的方式进行检测，检测量很大时，会很消耗性能，此种方式在检测量较大时，也只是进行一次迭代操作，并被闭包缓存下来，极大的提高性能的利用率；<br>当然此方法不只限于检测标签，还可以进行拓展，比如检测svg等等，可以进行自由发挥。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/(JS)javascript%205%E7%A7%8D%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/05/17/(JS)javascript%205%E7%A7%8D%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>1.构造继承：<br>function Animal() {<br>    this.desc &#x3D; “动物”<br>}<br>Animal.prototype.play &#x3D; function() {<br>    console.log(‘play’)<br>}<br>function Cat(name, color) {<br>    Animal.call(this, arguments)<br>    this.name &#x3D; name<br>    this.color &#x3D; color<br>}<br>let cat &#x3D; new Cat(‘kitty’, ‘red’)<br>console.log(cat.name)  &#x2F;&#x2F; kitty<br>console.log(cat.desc) &#x2F;&#x2F; 动物<br>console.log(cat.play) &#x2F;&#x2F; undefined<br>console.log(cat instanceof Animal) &#x2F;&#x2F;false<br>console.log(cat instanceof Cat) &#x2F;&#x2F;true<br>特点：实现简单，可以传参，多继承。但是无法继承原型属性；</p><p>2.原型链继承<br>function Animal() {<br>    this.desc &#x3D; “动物”<br>}<br>Animal.prototype.play &#x3D; function () {<br>    console.log(‘play’)<br>}<br>function Cat(name, color) {<br>    this.name &#x3D; name<br>    this.color &#x3D; color<br>}<br>Cat.prototype &#x3D; new Animal()<br>Cat.prototype.constructor &#x3D; Cat</p><p>let cat &#x3D; new Cat(‘kitty’, ‘red’)<br>console.log(cat.name)<br>console.log(cat.desc)<br>console.log(cat.play)<br>console.log(cat)<br>console.log(cat instanceof Animal)<br>console.log(cat instanceof Cat)<br><img src="https://img-blog.csdnimg.cn/20210202103015382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>特点：实现相对简单，子类可以传参，父类不能传参、可以多继承。但是所有属性共享父实例，修改继承属性时，所以子类都会被修改；<br>3.直接继承prototype：第二种的改版（差不多不测了）<br>　　Cat.prototype &#x3D; Animal.prototype;</p><p>　　Cat.prototype.constructor &#x3D; Cat;</p><p>　　var cat1 &#x3D; new Cat(“大毛”,”黄色”);</p><p>　　alert(cat1.species); &#x2F;&#x2F; 动物<br>　<br>4.寄生继承：<br>function Animal() {<br>    this.desc &#x3D; “动物”<br>}<br>Animal.prototype.play &#x3D; function () {<br>    console.log(‘play’)<br>}<br>function Cat(name, color) {<br>    this.name &#x3D; name<br>    this.color &#x3D; color<br>}<br>function extend(child, parent) {<br>    let F &#x3D; function () { }<br>    F.prototype &#x3D; parent.prototype<br>    child.prototype &#x3D; new F()<br>    child.prototype.constructor &#x3D; child<br>    child.uber &#x3D; parent.prototype<br>}<br>extend(Cat, Animal)<br>let cat &#x3D; new Cat(“大毛”, “黄色”)<br>console.log(cat.play)<br>console.log(cat instanceof Animal)<br>console.log(cat instanceof Cat)<br><img src="https://img-blog.csdnimg.cn/20210202110021523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>特点：相对较为全面，创建时可以传参，避免了共享原型属性的问题；<br>5.拷贝继承：<br>　　function extend2(Child, Parent) {<br>　　　　var p &#x3D; Parent.prototype;<br>　　　　var c &#x3D; Child.prototype;<br>　　　　for (var i in p) {<br>　　　　　　c[i] &#x3D; p[i];<br>　　　　　　}<br>　　　　c.uber &#x3D; p;<br>　　}<br>特点： 实现简单，但是性能耗用高；</p><p>参考链接：<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html">http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/2021-03-18/"/>
      <url>/2023/05/17/2021-03-18/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nextick 实现原理</span></span><br><span class="line"><span class="function">function <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">queueWatcher</span>(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let queue = []</span><br><span class="line">let hash = &#123;&#125;</span><br><span class="line">let pending = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 通过flushScheduleQueue将更新队列的watcher执行</span></span><br><span class="line">function <span class="built_in">flushScheduleQueue</span>() &#123;</span><br><span class="line">  queue.forEach(watcher =&gt; &#123;</span><br><span class="line">    watcher.<span class="built_in">run</span>()</span><br><span class="line">    watcher.<span class="built_in">cb</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  queue = []</span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  pending = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过queueWatcher将需要批量更新的watcher存在一个队列之中，并做哈希去重操作</span></span><br><span class="line">function <span class="built_in">queueWatcher</span>(watcher) &#123;  </span><br><span class="line">  <span class="type">const</span> id = watcher.id</span><br><span class="line">  <span class="keyword">if</span>(hash[id] ==  null) &#123;</span><br><span class="line">    queue.<span class="built_in">push</span>(watcher)</span><br><span class="line">    hash[id] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span>(!pending) &#123;</span><br><span class="line">      <span class="built_in">nextick</span>(flushScheduleQueue)</span><br><span class="line">      pending = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nextick</span></span><br><span class="line">let cbList = []</span><br><span class="line">function <span class="built_in">flushCallback</span>() &#123;</span><br><span class="line">  <span class="keyword">while</span>(cbList.length) &#123;</span><br><span class="line">    let cb = cbList.<span class="built_in">shift</span>()</span><br><span class="line">    <span class="built_in">cb</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  pending = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue和用户都可以使用nextick</span></span><br><span class="line">function <span class="built_in">nextick</span>(cb) &#123;</span><br><span class="line">  cbList.<span class="built_in">push</span>(cb)</span><br><span class="line">  <span class="keyword">if</span>(!pending) &#123;</span><br><span class="line">    <span class="built_in">timerFunc</span>()</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nextick兼容处理</span></span><br><span class="line">let timerFunc</span><br><span class="line"><span class="keyword">if</span>(Promise) &#123;</span><br><span class="line">  timerFunc = () =&gt; &#123;</span><br><span class="line">    Promise.<span class="built_in">resolve</span>().<span class="built_in">then</span>(flushCallback)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(MutationObserver) &#123; <span class="comment">// 监视dom变化</span></span><br><span class="line">  let observer = <span class="keyword">new</span> <span class="built_in">MutationObserver</span>(flushCallback)</span><br><span class="line">  let textNode = document.<span class="built_in">createTextNode</span>(<span class="number">1</span>)</span><br><span class="line">  observer.<span class="built_in">observe</span>(textNode, &#123; characterData: <span class="literal">true</span> &#125;)</span><br><span class="line">  timerFunc = () =&gt; &#123;</span><br><span class="line">    textNode.textContent = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(setImmediate) &#123;</span><br><span class="line">  timerFunc = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">setImmediate</span>(flushCallback)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  timerFunc = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallback)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/javascript%20%E4%BC%98%E9%9B%85%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2023/05/17/javascript%20%E4%BC%98%E9%9B%85%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> deepClone = (data) =&gt;&#123;</span><br><span class="line">let newData = Array.<span class="built_in">isArray</span>( data ) ? [] : &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>( let k in data) &#123;</span><br><span class="line"><span class="keyword">if</span>(data.<span class="built_in">hasOwnProperty</span>( k )) &#123;</span><br><span class="line"><span class="keyword">if</span>(typeof data[k] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">newData[k] = <span class="built_in">deepClone</span>(data[k])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newData[k] = data[k]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/js%20%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/05/17/js%20%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>进阶版防抖：分立即防抖和非立即防抖，综合实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">debounce</span><span class="params">(func,wait,imm)</span> </span>&#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">function</span>() &#123;</span><br><span class="line">        <span class="type">const</span> content = <span class="keyword">this</span></span><br><span class="line">        <span class="type">const</span> args = [...arguments]</span><br><span class="line">        <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">if</span>(imm) &#123;</span><br><span class="line">            let isNow = !timer</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(_ =&gt; &#123;</span><br><span class="line">               timer = null</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span>(isNow) func.<span class="built_in">apply</span>(content,args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(_ =&gt; &#123;</span><br><span class="line">                func.<span class="built_in">apply</span>(content,args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="built_in">fn</span>() &#123;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">&#x27;fn执行了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">debounce</span>(fn, <span class="number">1000</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>节流函数：（定时器版本和时间戳版本差不太多，此处我们只写一下定时器版本）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> throllle = (fn, wait) =&gt; &#123;</span><br><span class="line">let timer</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">function</span> () &#123;</span><br><span class="line">let context = <span class="keyword">this</span></span><br><span class="line">let args = arguments</span><br><span class="line"><span class="keyword">if</span>(!timer) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(() =&gt; &#123;</span><br><span class="line">timer = null</span><br><span class="line">fn.<span class="built_in">apply</span>(context, args)</span><br><span class="line">&#125;, wait)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue%20%E7%9A%84%20nextick%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/05/17/vue%20%E7%9A%84%20nextick%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">let timerFunc = null</span><br><span class="line">let callbacks = []</span><br><span class="line">let pending = false</span><br><span class="line"></span><br><span class="line">function flushHandler() &#123;</span><br><span class="line">    pending = false</span><br><span class="line">    let copies = callbacks.slice(0)</span><br><span class="line">    callbacks.length = 0</span><br><span class="line">    for(let i = 0; i &lt; copies.length; i++) &#123;</span><br><span class="line">        copies[i]()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isNative(Promise) &amp;&amp; typeof Promise === &#x27;function&#x27;) &#123;</span><br><span class="line">    let p = Promise.resolve()</span><br><span class="line">    let logError = err =&gt; console.error(err)</span><br><span class="line">    timerFunc = () =&gt; &#123;</span><br><span class="line">        p.then(nextickHandler).catch(logError)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else if(!isIE &amp;&amp; typeof MutationObserver !== &#x27;undefined&#x27; &amp;&amp; isNative(MutationObserver) &amp;&amp; typeof MutationObserver.toString() === &#x27;[object MutationObserverConstructor]&#x27;) &#123;</span><br><span class="line">    let counter = 0</span><br><span class="line">    let observer = new MutationObserver(nextickHandler)</span><br><span class="line">    let textNode = document.createTextNode(String(counter))</span><br><span class="line">    observer.observe(textNode, &#123;</span><br><span class="line">        charaterData: true</span><br><span class="line">    &#125;)</span><br><span class="line">    timerFunc = () =&gt; &#123;</span><br><span class="line">        counter = (counter + 1) % 2</span><br><span class="line">        textNode.data = String(counter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    timerFunc = () =&gt; &#123;</span><br><span class="line">        setTimeout(nextickHandler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const nextick = (cb?: Function, ctx?: Object) =&gt; &#123;</span><br><span class="line">    let _resolve</span><br><span class="line">    callbacks.push(() =&gt; &#123;</span><br><span class="line">        if(cb) &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                cb.call(ctx)</span><br><span class="line">            &#125; catch(e) &#123;</span><br><span class="line">                console.log(e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if(_resolve) &#123;</span><br><span class="line">            _resolve(ctx)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    if(pending) &#123;</span><br><span class="line">        pending = true</span><br><span class="line">        timerFunc()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!cb &amp;&amp; typeof Promise !== &#x27;undefined&#x27;) &#123;</span><br><span class="line">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            _resolve = resolve</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isNative(p) &#123;</span><br><span class="line">    return typeof p !== &#x27;undefined&#x27; &amp;&amp; /native code/.test(p.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue2.x%20SPA%E9%A1%B9%E7%9B%AE%20%E6%94%B9%E6%88%90SSR%E9%A1%B9%E7%9B%AE%E5%8F%82%E8%80%83%E5%9C%B0%E5%9D%80/"/>
      <url>/2023/05/17/vue2.x%20SPA%E9%A1%B9%E7%9B%AE%20%E6%94%B9%E6%88%90SSR%E9%A1%B9%E7%9B%AE%E5%8F%82%E8%80%83%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_24073885/article/details/103567226">https://blog.csdn.net/qq_24073885/article/details/103567226</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue3%20typeScript%20vite%E6%90%AD%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB%EF%BC%88%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F%EF%BC%89/"/>
      <url>/2023/05/17/vue3%20typeScript%20vite%E6%90%AD%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB%EF%BC%88%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lunahaijiao/article/details/111940138">https://blog.csdn.net/lunahaijiao/article/details/111940138</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2023/05/17/vue%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>vue的核心思想是：数据驱动（可以翻下我前面的分享，有关于数据驱动的简单实现代码）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%A4%A7%E4%BD%AC%E5%88%86%E4%BA%AB%E7%9A%84%E5%87%A0%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E6%8B%BF%E8%BF%87%E6%9D%A5%E8%87%AA%E5%B7%B1%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8B%EF%BC%881%EF%BC%89/"/>
      <url>/2023/05/17/%E5%A4%A7%E4%BD%AC%E5%88%86%E4%BA%AB%E7%9A%84%E5%87%A0%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E6%8B%BF%E8%BF%87%E6%9D%A5%E8%87%AA%E5%B7%B1%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>说一下js的数据类型，如何判断数据类型？（变量用k来声名）<br>null       ！k &amp;&amp; typeof(k) &#x3D;&#x3D;&#x3D; ‘object’<br>undefined   typeof(k) &#x3D;&#x3D;&#x3D; ‘undefined’<br>String   typeof(k) &#x3D;&#x3D;&#x3D; ‘string’<br>Number  typeof(k) &#x3D;&#x3D;&#x3D; ‘number’<br>Boolean typeof(k) &#x3D;&#x3D;&#x3D; ‘boolean’<br>symbol typeof(k) &#x3D;&#x3D;&#x3D; ‘symbol’</p><p>Array Array.isArray() &#x2F; k instanceof Array 【】等等<br>Object k instanceof Object</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%A4%A7%E4%BD%AC%E5%88%86%E4%BA%AB%E7%9A%84%E5%87%A0%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E6%8B%BF%E8%BF%87%E6%9D%A5%E8%87%AA%E5%B7%B1%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2023/05/17/%E5%A4%A7%E4%BD%AC%E5%88%86%E4%BA%AB%E7%9A%84%E5%87%A0%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E6%8B%BF%E8%BF%87%E6%9D%A5%E8%87%AA%E5%B7%B1%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>如何判断一个对象是否属于某个类？ –推荐使用  instance</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%A6%82%E4%BD%95%E8%AE%A9%EF%BC%88a%20==1%20&amp;&amp;%20a%20==%202%20&amp;&amp;%20a%20==%203%EF%BC%89%E6%88%90%E7%AB%8B/"/>
      <url>/2023/05/17/%E5%A6%82%E4%BD%95%E8%AE%A9%EF%BC%88a%20==1%20&amp;&amp;%20a%20==%202%20&amp;&amp;%20a%20==%203%EF%BC%89%E6%88%90%E7%AB%8B/</url>
      
        <content type="html"><![CDATA[<p>如何让（a &#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D; 3）成立:<br>问题核心：判等式在执行的时候会进行隐式转换，当a为对象的时候，会先调用a.valueOf() 再调用 a.toString(),方法，最后利用函数拦截重写方法，使等式成立；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">function</span> ()&#123;</span><br><span class="line">var a = &#123;</span><br><span class="line">i: <span class="number">1</span>,</span><br><span class="line">toString: <span class="built_in">function</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> a.i ++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAPromise.all%E7%8E%A9%E4%B8%80%E5%93%88/"/>
      <url>/2023/05/17/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAPromise.all%E7%8E%A9%E4%B8%80%E5%93%88/</url>
      
        <content type="html"><![CDATA[<p>Promise.myAll &#x3D; function(arr) {<br>    let results &#x3D; []<br>    let current &#x3D; null<br>    let counter &#x3D; 0<br>    return new Promise((resolve,reject) &#x3D;&gt; {</p><pre><code>    function processData(key, value) &#123;        results[key] = value        if(++counter === arr.length) &#123;            resolve(results)        &#125;    &#125;    for(let i = 0; i &lt; arr.length; i ++) &#123;        current = arr[i]        if(isPromise(current)) &#123;            current.then(res= &gt;&#123;                processData(i, res)            &#125;,reject)        &#125; else &#123;            processData(i, current)        &#125;    &#125;&#125;)</code></pre><p>}</p><p>function isPromise(o) {<br>    return !!o &amp;&amp; (typeof o &#x3D;&#x3D;&#x3D; ‘object’ || typeof o &#x3D;&#x3D;&#x3D; ‘function’) &amp;&amp; typeof o.then &#x3D;&#x3D;&#x3D; ‘function’<br>}</p><p>测试：<br>let p1 &#x3D; new Promise((resolve, rejcet) &#x3D;&gt; {<br>    resolve(1)<br>})<br>let p2 &#x3D; new Promise((resolve, rejcet) &#x3D;&gt; {<br>    resolve(2)<br>})</p><p>Promise.myAll([p1, p2]).then( res &#x3D;&gt; {<br>    console.log(res)<br>})</p><p>&#x2F;&#x2F; 输出应该是【1， 2】<br>注意：1.尽量别往Promise.prototype上面挂，因为构造函数的实力才可以访问到原型上，但Promise有时候用的是构造函数如：Promise.all([p1, p2])</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E7%AE%80%E7%AE%80%E5%8D%95%E5%8D%95%E5%B0%81%E8%A3%85%E4%B8%AAPromise/"/>
      <url>/2023/05/17/%E7%AE%80%E7%AE%80%E5%8D%95%E5%8D%95%E5%B0%81%E8%A3%85%E4%B8%AAPromise/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">MyPromise</span><span class="params">(fn)</span> </span>&#123;</span><br><span class="line">let that = <span class="keyword">this</span></span><br><span class="line">that.status = <span class="string">&quot;pending&quot;</span></span><br><span class="line">that.value = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">function <span class="built_in">resolve</span>(value) &#123;</span><br><span class="line"><span class="keyword">if</span> (that.status === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">that.status = <span class="string">&quot;resolve&quot;</span></span><br><span class="line">that.value = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="built_in">reject</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (that.status === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">that.status = <span class="string">&quot;reject&quot;</span></span><br><span class="line">that.value = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fn</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="built_in">function</span> (onResolve, onReject) &#123;</span><br><span class="line">let that = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">if</span> (that.status === <span class="string">&quot;resolve&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">onResolve</span>(that.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (that.status === <span class="string">&quot;reject&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">onReject</span>(that.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p = <span class="keyword">new</span> <span class="built_in">MyPromise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line"><span class="built_in">resolve</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">reject</span>(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="built_in">then</span>(res =&gt; &#123;</span><br><span class="line">console.<span class="built_in">log</span>(res)</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">consoel.<span class="built_in">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0call%E3%80%81%20apply%E3%80%81%20bind%20%E6%96%B9%E6%B3%95/"/>
      <url>/2023/05/17/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0call%E3%80%81%20apply%E3%80%81%20bind%20%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>实现call方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function person(a, b, c, d) &#123;</span><br><span class="line">  console.log(this.name)</span><br><span class="line">  console.log(a, b, c, d)</span><br><span class="line">&#125;</span><br><span class="line">let man = &#123;</span><br><span class="line">  name: &#x27;zachary&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Function.prototype.newCall = function(obj) &#123;</span><br><span class="line">    obj = obj || window</span><br><span class="line">    obj.p = this</span><br><span class="line">    let newArguments = []</span><br><span class="line">    for(let i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class="line">      newArguments.push( arguments[i] )</span><br><span class="line">    &#125;</span><br><span class="line">    obj.p(...newArguments)</span><br><span class="line">    delete obj.p</span><br><span class="line">&#125;</span><br><span class="line">person.call(man, 1, 2, 3, 4)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下<br><img src="https://img-blog.csdnimg.cn/20210127143634761.png" alt="在这里插入图片描述"><br>实现apply方法：（跟call区别是使用数组接受所有参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function person(a, b, c, d) &#123;</span><br><span class="line">  console.log(this.name)</span><br><span class="line">  console.log(a, b, c, d)</span><br><span class="line">&#125;</span><br><span class="line">let man = &#123;</span><br><span class="line">  name: &#x27;zachary&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Function.prototype.newApply = function(obj, arr) &#123;</span><br><span class="line">    obj.p = this</span><br><span class="line">    if(!arr) obj.p()</span><br><span class="line">    else &#123;</span><br><span class="line">    let newArguments = []</span><br><span class="line">    for(let i = 0; i &lt; arr.length; i ++) &#123;</span><br><span class="line">newArguments.push(  arr[i] )</span><br><span class="line"> &#125;</span><br><span class="line"> obj.p(...newArguments )</span><br><span class="line">&#125;</span><br><span class="line">    delete obj.p</span><br><span class="line">&#125;</span><br><span class="line">person.call(man, 1, 2, 3, 4)</span><br></pre></td></tr></table></figure><p>结果：<img src="https://img-blog.csdnimg.cn/20210127144422109.png" alt="在这里插入图片描述"><br>实现bind方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function person(a,b,c,d) &#123;</span><br><span class="line">  console.log(this.name)</span><br><span class="line">  console.log(a,b,c,d)</span><br><span class="line">&#125;</span><br><span class="line">let man = &#123;name: &#x27;zachary&#x27;&#125;</span><br><span class="line"></span><br><span class="line">Function.prototype.newBind = function( obj ) &#123;</span><br><span class="line">  let that = this</span><br><span class="line">  let arr1 = Array.prototype.slice.call(arguments, 1)</span><br><span class="line">  return function() &#123;</span><br><span class="line">      let arr2 = Array.prototype.slice.call(arguments)</span><br><span class="line">      console.log(arr1.concat(arr2))</span><br><span class="line">console.log(arr1)</span><br><span class="line">console.log(arr2)</span><br><span class="line">      that.apply(obj, arr1.concat(arr2))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.newBind(man, 1,2,3)(5)</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20210127150413359.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9Anode%20%E4%B8%AD%20%E4%BD%BF%E7%94%A8oracledb%20%E8%BF%9E%E6%8E%A5%20oracle%E6%95%B0%E6%8D%AE%E5%BA%93%20(node%E7%AB%AF%E8%BF%9E%E6%8E%A5oracle%20%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%20instance-client%20java%E6%98%AF%E4%B8%8D%E7%94%A8%E7%9A%84)%EF%BC%9B/"/>
      <url>/2023/05/17/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9Anode%20%E4%B8%AD%20%E4%BD%BF%E7%94%A8oracledb%20%E8%BF%9E%E6%8E%A5%20oracle%E6%95%B0%E6%8D%AE%E5%BA%93%20(node%E7%AB%AF%E8%BF%9E%E6%8E%A5oracle%20%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%20instance-client%20java%E6%98%AF%E4%B8%8D%E7%94%A8%E7%9A%84)%EF%BC%9B/</url>
      
        <content type="html"><![CDATA[<p>1.oracledb.js:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const oracledb = require(&#x27;oracledb&#x27;);</span><br><span class="line">let config  = &#123;</span><br><span class="line">user: &#x27;test&#x27;,</span><br><span class="line">passord: &#x27;123123&#x27;,</span><br><span class="line">connectString: &#x27;127.0.0.1:1521/test&#x27;</span><br><span class="line">&#125;</span><br><span class="line">async function run() &#123;</span><br><span class="line">  let connection;</span><br><span class="line">  </span><br><span class="line">  try &#123;</span><br><span class="line"></span><br><span class="line">    let sql, binds, options, result;</span><br><span class="line"></span><br><span class="line">    connection = await oracledb.getConnection(config ， （） =&gt; &#123;</span><br><span class="line">    console.log(&#x27;oracle连接成功&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  // 注意： 增删改查数据的代码就写在这后面就行了。</span><br><span class="line">    </span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.error(连接失败，err);</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    if (connection) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        await connection.close();</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>2.安装oracle instance client<br>uri:<a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html</a><br>需要同时安装三个包（版本统一，根据具体系统选择能兼容的版本，不要刻意求新）：<br>示例：</p><ol><li>instantclient-basic-windows.x64-12.1.0.2.0.zip</li><li>instantclient-sdk-windows.x64-12.1.0.2.0.zip。</li></ol><p>需要同时，最后解压到一个文件夹下即可；</p><p>接下来：需要配置系统环境变量：<br>Path：增加instance的文件绝对路径：xxx&#x2F;xxx&#x2F;xxx&#x2F;（最后解压的到一起的文件夹的绝对路径）（修改系统变量时不要修改原来的路径内容，要注意实在path变量中 进行添加 使用 ；隔开即可）。<br>OCI_LIB_DIR: xxx&#x2F;xxx&#x2F;xxx&#x2F;sdk&#x2F;lib&#x2F;msvc<br>OCI_INC_DIR: xxx&#x2F;xxx&#x2F;xxx&#x2F;sdk&#x2F;include</p><p>3.可以直接使用nodemon oracledb.js 直接运行； &#x2F;&#x2F; 终端输出内容为：‘oracle连接成功’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/Javascript%20%E7%9A%84%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/05/17/Javascript%20%E7%9A%84%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>1.SyntaxError（语法错误）；<br>2.ReferenceError（引用错误）；<br>3.RangeError（范围错误）；<br>4.TypeError（类型错误）；<br>5.URLError（URL错误）；<br>6.EvalError（eval错误）；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/axios%20cancelToken%20source%20%E5%8F%96%E6%B6%88%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2023/05/17/axios%20cancelToken%20source%20%E5%8F%96%E6%B6%88%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>问题描述：按照以下axios官方文档说明，使用source.tokenhe source.cancel终止请求时，调用一次source.cancel，会把所有的请求都终止，并且再次发送请求都发不出去了;</p><p><img src="https://img-blog.csdnimg.cn/20210429100137870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解决办法：<br>1.请求拦截器：config里面添加token（注意source&#x3D;cancelToken.source（）注意：每个请求被拦截的时候都新生成一个source；<br><img src="https://img-blog.csdnimg.cn/20210429100948319.png" alt="在这里插入图片描述"></p><p>2.把刚才添加的source 存储到store的数组中（setCancelToken是存soure，setClearRequests是清空所有的source）<br><img src="https://img-blog.csdnimg.cn/20210429100806517.png"></p><p>3.路由钩子beforeEach中调用source.cancel 管壁上一个页面的所有请求；注意：及时清空store的数组哦；<br><img src="https://img-blog.csdnimg.cn/20210429101148797.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/javascript%20%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%88%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%20%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%EF%BC%89/"/>
      <url>/2023/05/17/javascript%20%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%88%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%20%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>js的事件循环：</p><p>特点：1.单线程 、 2.非阻塞；</p><p>1.执行栈（单线程）：整体代码的执行由上而下，编译一句，执行一句；</p><p>2.任务队列（非阻塞）：同步代码放到执行栈中执行，异步代码会先存放到任务队列中，执行栈代码先执行，异步代码在执行栈执行完后再执行；</p><p>深入解释：宏任务与微任务<br>分类定义：<br>宏任务：同步代码、setTimeout、setInterval、setImmediate、i&#x2F;o、UI rendering（多宏任务执行顺序）；<br>微任务：promise、Object.observe（已废弃）、mutationObserevr(浏览器本身的api，观察数据变化触发响应的回调，做埋点什么的会用到)</p><p>1.第一次事件循环当中，同步代码是宏任务，宏任务执行后，紧跟着本次循环当中的所有微任务（如promise.then）立即执行；</p><p>2.下次循环也会优先执行所有的宏任务，宏任务执行后立即执行所有的微任务；</p><p>注意：如果宏任务中还有一异步代码，那么会放到下次循环当中再执行，顺序依然是宏任务微任务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/js%20leetcode%20%E5%85%A8%E6%8E%92%E5%88%97%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E4%BB%BB%E6%84%8F%E7%BB%84%E5%90%88%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2023/05/17/js%20leetcode%20%E5%85%A8%E6%8E%92%E5%88%97%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E4%BB%BB%E6%84%8F%E7%BB%84%E5%90%88%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">combination</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> results = []</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">group</span> = []</span><br><span class="line">  <span class="function">function <span class="title">comb</span>(<span class="params">arr</span>)</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">let</span> current</span></span><br><span class="line"><span class="function">    <span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++</span>)</span> &#123;</span><br><span class="line">      current = arr.splice(i, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">group</span>.push(current)</span><br><span class="line">      <span class="keyword">if</span>(arr.length === <span class="number">0</span> ) results.push(<span class="keyword">group</span>.slice())</span><br><span class="line">      comb(arr)</span><br><span class="line">      arr.splice(i, <span class="number">0</span>, current)</span><br><span class="line">      <span class="keyword">group</span>.pop()    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  comb(target)</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">combination([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E6%96%B0%EF%BC%89/"/>
      <url>/2023/05/17/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&#x3D;&#x3D;mounting阶段：&#x3D;&#x3D;</p><p>constructor()<br>static getDerivedStateFromProps()<br>render()<br>componentDidMount()</p><p>&#x3D;&#x3D;updating阶段：&#x3D;&#x3D;</p><p>static getDerivedStateFromProps()<br>shouldComponentUpdate()<br>render()<br>getSnapshotBeforeUpdate()<br>componentDidUpdate()</p><p>unmounting阶段：<br>componentWillUnmount</p><p>参考链接：react官网 –<a href="https://zh-hans.reactjs.org/docs/react-component.html">https://zh-hans.reactjs.org/docs/react-component.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/sql%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/05/17/sql%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>(注意：查询编辑控件可以使用选中执行 ，命令有：select update delete )</p><p>一、基础查询语法：</p><p>1.基本使用方法：</p><pre><code>select  *（列名） from  chart（表名） where name=&#39;张三&#39;（条件）</code></pre><p>2.模糊查询及逻辑关系：</p><pre><code>select  *  from  chart  where name like &#39;张%&#39; and sex=&#39;男</code></pre><p>‘<br>3.添加别名：(as 可以省略)</p><pre><code>select  name as 姓名 ，sex as 性别 ，邮件=email  from  chart  (两种方式)</code></pre><p>4.合并列输出：</p><p>select  name + ‘:’+ sex as 个人信息  from  chart  </p><p>5.查询空行空值：</p><pre><code>select  *  from  chart  where name is null or name= &#39;&#39;</code></pre><p>6.使用别名：</p><p>select  d.* from  chart d </p><p>7.常量列查询：</p><p>select  ‘浙江省’ as 学校 from  chart</p><p>8.限制条数返回：</p><p>select  top 5 * as 学校 from  chart<br>1<br>9.限制百分比返回：</p><p>select  top 20 percent * as 学校 from  chart</p><p>1<br>0.排序和多列排序：（默认升序）</p><p>select * from  chart order by age asc   升序</p><p>select * from  chart order by age desc  降序<br>select * from  chart order by age asc, high desc  升序</p><p>二、子查询语法 子查询给父查询建立查询条件</p><p>1.分页查询：第二页的五条数据 not in 排除</p><p>select top 5 * from chart where age not in (select top 5 age from chart)</p><p>2.&gt; &lt; 等 使用</p><p>select * from chart where age &gt; (select age from chart where name&#x3D;‘张三’)</p><p>三、聚合函数和分组查询(sql 有一些常用内置函数，日期 等等)</p><p>1.sum()</p><p>2.avg()</p><p>3.max()</p><p>4.min()</p><p>5.count()</p><p>6.分组查询：group by</p><p>7.分组筛选：having</p><p>8.where、group by 、having执行顺序：</p><pre><code>where 依托于from子句制定操作产生的行；group by 依托于where子句筛选后产生的行</code></pre><p>having 依托于分组后产生的行尽心再次筛选；</p><p>四、表连接<br>(<br>内连接：两张表共有的数据才会输出<br>外连接：以某张表为基准，数据都会显示，如果没有对应的数据，显示为null<br>，左右外连接的区别是：以谁（join的左右）为基准<br>)</p><p>1.内连接：inner join</p><pre><code>语法a：</code></pre><p>select r.id,r.name,m.age from result r inner join my_list m on r.id &#x3D; m.id</p><pre><code>语法b：</code></pre><p>select r.id,r.name,l.age from result r ,my_list l where r.id &#x3D; l.id</p><p>多表联查：<br>select r.id,r.name,m.age from result r<br>inner join my_list m on r.id &#x3D; m.id<br>inner join your_list y on r.id &#x3D; y.id<br>…</p><p>2.（左、右）外连接：left join 、 right join </p><p>select r.id,r.name,m.age from result r<br>left join my_list m on r.id &#x3D; m.id<br>   &#x2F;&#x2F;<br>(说明：此时是以results表为准，逐条匹配，否则用null填充，null可以改成其他状态需要补充)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue%20%20node%20%E5%81%9ARSA%E5%8A%A0%E5%AF%86%20%EF%BC%9B%EF%BC%9B%20%20%E5%88%A9%E7%94%A8jsencrypt%E6%8F%92%E4%BB%B6%EF%BC%88%E8%AF%A5%E9%83%A8%E5%88%86%E6%94%BE%E5%89%8D%E7%AB%AF%EF%BC%89%20node-rsa%E6%A8%A1%E5%9D%97%EF%BC%88%E8%AF%A5%E9%83%A8%E5%88%86%E6%94%BEnode%E7%AB%AF%EF%BC%89/"/>
      <url>/2023/05/17/vue%20%20node%20%E5%81%9ARSA%E5%8A%A0%E5%AF%86%20%EF%BC%9B%EF%BC%9B%20%20%E5%88%A9%E7%94%A8jsencrypt%E6%8F%92%E4%BB%B6%EF%BC%88%E8%AF%A5%E9%83%A8%E5%88%86%E6%94%BE%E5%89%8D%E7%AB%AF%EF%BC%89%20node-rsa%E6%A8%A1%E5%9D%97%EF%BC%88%E8%AF%A5%E9%83%A8%E5%88%86%E6%94%BEnode%E7%AB%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>1.bcrypt 进行md5 加密后存在库中的密码密文是不可逆的；<br>2.前端再用bcrypt 进行加密，两段密文是不一样的；<br>3.bcrypt 方法比对只有该模块提供的compare方法，但是该方法要求同时提供原明文密码和库中的密文密码（一般为了保护用户账号安全，都这样放）才可以判断出密码是否正确；<br>4.生成公私钥的方法一般用linux系统中的openssl：<br>生成私钥：openssl genrsa -out rsa_private_key.pem 1024<br>生成公钥：openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</p><p>前端部分（vue）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desp 使用jsEncrypt在前端加密密码</span></span><br><span class="line"><span class="comment"> * @return 返回一段根据公钥生成的密文；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">import &#123; JSEncrypt &#125; <span class="keyword">from</span> <span class="string">&#x27;jsencrypt&#x27;</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> encryptPwd = (pwd) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> publicKey = `-----BEGIN PUBLIC KEY-----</span><br><span class="line">  MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwoUIbJUZnpqNdPPmvXjCDduUd</span><br><span class="line">  ...</span><br><span class="line">  KukdDIQYDJitKdfDcYTavnb/rodO7Nxg27gs+PEE8t6X3xBHOY6HldLql0gPD5Nq</span><br><span class="line">  Q/eQ5KT8BS16+U5SXQIDAQAB</span><br><span class="line">  -----END PUBLIC KEY-----`</span><br><span class="line">  <span class="keyword">let</span> encryptor = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">  encryptor.setPublicKey(publicKey)</span><br><span class="line">  <span class="keyword">return</span> encryptor.encrypt(pwd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端部分（node express）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解密JSEncrypt  利用私钥</span></span><br><span class="line"><span class="comment">// 该方法可以返回</span></span><br><span class="line"><span class="keyword">const</span> NodeRSA = require(<span class="string">&#x27;node-rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">decryptPwd</span> (<span class="params">target</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> _priKey = `-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICWwIBAAKBgQCwoUIbJUZnpqNdPPmvXjCDduUdt5Bg0Z7idj8FcXnZ+KckOzI9</span><br><span class="line">...</span><br><span class="line">jtIEz9DNY3jyy1GeGQJATActb9hR+q9FH3ygjIC7WUrAow7iOwPYDeMQQwwOxaSo</span><br><span class="line">kzyvh4bPbVDgDGn6nJmUjxzvmCL7KeZohc8yBvFHaQ==</span><br><span class="line">-----END RSA PRIVATE KEY-----`</span><br><span class="line"><span class="keyword">const</span> privateKey = <span class="keyword">new</span> NodeRSA(_priKey)</span><br><span class="line">privateKey.setOptions(&#123; encryptionScheme: <span class="string">&#x27;pkcs1&#x27;</span> &#125;) <span class="comment">// node-rsa 跟jsecrypt 协议不一样</span></span><br><span class="line"><span class="keyword">return</span> privateKey.decrypt(target, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue3%20+%20vant%20%20%E5%85%A8%E5%B1%80%E7%9A%84loading%E6%95%88%E6%9E%9C%E5%88%B6%E4%BD%9C%EF%BC%8C%E5%86%99%E7%9A%84%E6%8C%BA%E5%A5%BD%E7%9A%84%E7%95%99%E4%B8%AA%E5%BA%95/"/>
      <url>/2023/05/17/vue3%20+%20vant%20%20%E5%85%A8%E5%B1%80%E7%9A%84loading%E6%95%88%E6%9E%9C%E5%88%B6%E4%BD%9C%EF%BC%8C%E5%86%99%E7%9A%84%E6%8C%BA%E5%A5%BD%E7%9A%84%E7%95%99%E4%B8%AA%E5%BA%95/</url>
      
        <content type="html"><![CDATA[<p>文章链接：<a href="https://blog.csdn.net/qq_36247432/article/details/115540435">https://blog.csdn.net/qq_36247432/article/details/115540435</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/vue%E5%92%8Creact%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%90%84%E8%87%AA%E7%89%B9%E7%82%B9%EF%BC%9B%E8%99%9A%E6%8B%9Fdom/"/>
      <url>/2023/05/17/vue%E5%92%8Creact%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%90%84%E8%87%AA%E7%89%B9%E7%82%B9%EF%BC%9B%E8%99%9A%E6%8B%9Fdom/</url>
      
        <content type="html"><![CDATA[<p>vue和react的diff算法区别及各自特点；虚拟dom待研究！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/webpack%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86%20%E5%BC%95%E9%89%B4/"/>
      <url>/2023/05/17/webpack%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86%20%E5%BC%95%E9%89%B4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43334673/article/details/107598708">https://blog.csdn.net/weixin_43334673/article/details/107598708</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%88%A9%E7%94%A8%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%EF%BC%88position_%20sticky%EF%BC%9B%EF%BC%89%20%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%8F%AF%E5%86%BB%E7%BB%93%E9%A6%96%E8%A1%8C%E5%92%8C%E7%AC%AC%E4%B8%80%E5%88%97%E7%9A%84%E8%A1%A8%E6%A0%BC/"/>
      <url>/2023/05/17/%E5%88%A9%E7%94%A8%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%EF%BC%88position_%20sticky%EF%BC%9B%EF%BC%89%20%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%8F%AF%E5%86%BB%E7%BB%93%E9%A6%96%E8%A1%8C%E5%92%8C%E7%AC%AC%E4%B8%80%E5%88%97%E7%9A%84%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>兼容性分析：<br>1.position： sticky 属性的兼容性：chrome 56 以上，edge 16以上，ie不支持；<br>2.由上述属性决定的该表格更适用于不考虑兼容性的移动端；</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;table-container&quot;</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th v-<span class="keyword">for</span>=<span class="string">&quot;item0 in thData&quot;</span> :key=<span class="string">&quot;item0.value&quot;</span>&gt;</span><br><span class="line">                        &#123;&#123; item0.label &#125;&#125;</span><br><span class="line">                    &lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr v-<span class="keyword">for</span>=<span class="string">&quot;item1 in tbData&quot;</span> :key=<span class="string">&quot;item1.toString()&quot;</span>&gt;</span><br><span class="line">                    &lt;td</span><br><span class="line">                        v-<span class="keyword">for</span>=<span class="string">&quot;item2 in thData&quot;</span></span><br><span class="line">                        :key=<span class="string">&quot;item2.value&quot;</span></span><br><span class="line">                        @click=<span class="string">&quot;openMagnifier(thData, item1)&quot;</span></span><br><span class="line">                    &gt;</span><br><span class="line">                        &#123;&#123; item1[item2.<span class="keyword">value</span>] &#125;&#125;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;van-popup</span><br><span class="line">        v-model:show=<span class="string">&quot;magnifierShow&quot;</span></span><br><span class="line">        closeable</span><br><span class="line">        position=<span class="string">&quot;top&quot;</span></span><br><span class="line">        :style=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">            &#x27;max-height&#x27;: &#x27;70%&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;margin-top&#x27;: &#x27;50px&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;padding-top&#x27;: &#x27;20px&#x27;,</span></span><br><span class="line"><span class="string">        &#125;&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">        &lt;van-divider</span><br><span class="line">            :style=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">                color: &#x27;#a1a1a1&#x27;,</span></span><br><span class="line"><span class="string">                borderColor: &#x27;#a1a1a1&#x27;,</span></span><br><span class="line"><span class="string">                padding: &#x27;0 16px&#x27;,</span></span><br><span class="line"><span class="string">            &#125;&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">            详细内容</span><br><span class="line">        &lt;/van-divider&gt;</span><br><span class="line">        &lt;van-cell</span><br><span class="line">            v-<span class="keyword">for</span>=<span class="string">&quot;(cell, i) in currentCell&quot;</span></span><br><span class="line">            :key=<span class="string">&quot;i&quot;</span></span><br><span class="line">            :title=<span class="string">&quot;cell[&#x27;label&#x27;]&quot;</span></span><br><span class="line">            :<span class="keyword">value</span>=<span class="string">&quot;cell[&#x27;data&#x27;]&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/van-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">export <span class="literal">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        thData: Array,</span><br><span class="line">        tbData: Array,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; thData, tbData &#125; = toRefs(props)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// data</span></span><br><span class="line">        <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">            magnifierShow: <span class="literal">false</span>,</span><br><span class="line">            currentCell: [],</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// methods</span></span><br><span class="line">        <span class="keyword">const</span> openMagnifier = (head, body) =&gt; &#123;</span><br><span class="line">            state.magnifierShow = <span class="literal">true</span></span><br><span class="line">            state.currentCell = head.map((v) =&gt; &#123;</span><br><span class="line">                v[<span class="string">&#x27;data&#x27;</span>] = body[v[<span class="string">&#x27;value&#x27;</span>]]</span><br><span class="line">                <span class="keyword">return</span> v</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...toRefs(state),</span><br><span class="line">            thData,</span><br><span class="line">            tbData,</span><br><span class="line">            openMagnifier,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> <span class="keyword">scoped</span>&gt;</span><br><span class="line">@import <span class="string">&#x27;./index.scss&#x27;</span>;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.table-container &#123;</span><br><span class="line">  table &#123;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    th,</span><br><span class="line">    td &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">      min-width: <span class="number">50</span>px;</span><br><span class="line">      max-width: <span class="number">70</span>px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      font-size: <span class="number">14</span>px;</span><br><span class="line">      line-height: <span class="number">17</span>px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      padding: <span class="number">9</span>px <span class="number">14</span>px <span class="number">8</span>px;</span><br><span class="line">      border-top: <span class="number">1</span>px solid <span class="meta">#e5e5e5;</span></span><br><span class="line">      border-right: <span class="number">1</span>px solid <span class="meta">#e5e5e5;</span></span><br><span class="line">    &#125;</span><br><span class="line">    th &#123;</span><br><span class="line">      background-color: <span class="meta">#eaf2fc;</span></span><br><span class="line">      position: sticky;</span><br><span class="line">      top: <span class="number">-1</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    td &#123;</span><br><span class="line">      background-color: <span class="meta">#fff;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    td:first-child &#123;</span><br><span class="line">      background-color: <span class="meta">#fff;</span></span><br><span class="line">      position: sticky;</span><br><span class="line">      left: <span class="number">0</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    th:first-child &#123;</span><br><span class="line">      position: sticky;</span><br><span class="line">      left: <span class="number">0</span>px;</span><br><span class="line">      z-index: <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%9F%BA%E6%9C%AC%E7%9A%84TS%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/17/%E5%9F%BA%E6%9C%AC%E7%9A%84TS%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Number<br>Boolean<br>String</p><p>数组：<br>String[]<br>Number[]<br>Boolean[]</p><p>泛型：<br>Array<String><br>Array<Boolean><br>Array<Boolean><br>Array<any></p><p>元祖:<br>[Boolean,String,Number]</p><p>函数：<br>函数<br>function（name：String）String<br>默认参数<br>function add(name:String&#x3D;’zachary’)<br>可选参数<br>function add(name？:String&#x3D;’zachary’) 可选放后边<br>剩余参数<br>function add(。。。results:String)<br>函数重载<br>function add(my:String)String<br>function add(my:String)String<br>function add(my:String,mon:Number)String {<br>    if(mon) return my+ mon<br>    else return my+<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%AF%BC%E8%88%AA%E6%A0%8F%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%88%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%8C%E9%87%8D%E7%82%B9%E5%85%B3%E6%B3%A8%EF%BC%89/"/>
      <url>/2023/05/17/%E5%AF%BC%E8%88%AA%E6%A0%8F%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%88%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%8C%E9%87%8D%E7%82%B9%E5%85%B3%E6%B3%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>输入URl开始：</strong><br><a href="%E5%8F%82%E8%80%83%EF%BC%9Ahttps://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work">参考MDN地址</a></p><p><strong>&#x3D;&gt;</strong> 浏览器向域名服务器请求进行DNS查找(以前未访问过,访问过的话先向缓存进行查找)；<br>**&#x3D;&gt;**服务器或者缓存返回一个IP地址（浏览器会缓存一段时间以减少首屏时间）；<br>**&#x3D;&gt;**通过IP定位到服务器后，浏览器通过TCP的三次握手与服务器建立连接；<br>**&#x3D;&gt;**浏览器代替用户发送一个http的 GET请求，实际是向服务器请求一个包含html的包；<br> **&#x3D;&gt;**服务器返回相应的响应头和html（TTFB 是用户通过点击链接进行请求与收到第一个HTML包之间的时间。第一块内容通常是14kb的数据）<br><strong>&#x3D;&gt;</strong> 然后进行‘TCP慢开始’，其实就是一种均衡网络连接速度的算法（初始为值14k，每次加倍到两倍直到达到设定阈值或与阻塞，是一个自适应的过程；‘拥塞控制算法’就是服务器利用发送包和客户端返回的确认帧流来控制发送速率的）<br><strong>&#x3D;&gt;</strong>  浏览器渲染的五个步骤：</p><p>**1.**构建DOM树：CSS不会阻塞html解析，会阻塞渲染，会阻塞js加载执行；<br>js 会阻塞dom解析和渲染，defer是加载完script资源要等解析结束后才执行，async并行下载完就并行执行了；</p><p>**2.**创建CSSOM树：很快，一般小于一次DNS查找的时间；</p><p>**3.**dom树和CSSOM树结合在渲染引擎GPU上的层上生成渲染树，让出主线程，速度且更快；</p><p>**4.**根据在渲染树布局（大小位置变化导致回流）；</p><p>**5.**最后一步是将各个节点绘制到屏幕上（是在GPU上的层上完成而不是在CPU上的主线程）；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E9%80%9A%E8%BF%87%20nodemailer%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%88node%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%EF%BC%89/"/>
      <url>/2023/05/17/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E9%80%9A%E8%BF%87%20nodemailer%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%88node%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>const nodemailer &#x3D; require(“nodemailer”);</p><p>let adminConfig &#x3D; {<br>    host: ‘xxx.163.com’, &#x2F;&#x2F; 邮箱主机地址<br>    &#x2F;&#x2F; port: 465, &#x2F;&#x2F; SMTP 端口 SSL的同465<br>    &#x2F;&#x2F; secure: true,<br>    ignoreTLS: true,<br>    auth: {<br>        user: ‘xxx.com’, &#x2F;&#x2F; 邮箱账号<br>        pass: ‘xxx’, &#x2F;&#x2F;密码<br>    }<br>}</p><p>const sendEmail &#x3D; async (userEmail, name, code) &#x3D;&gt; {<br>    let transporter &#x3D; nodemailer.createTransport(adminConfig);<br>    let mailOptions &#x3D; {<br>        from: ‘管理员&lt;xxx.com&gt;’,<br>        to: userEmail,<br>        subject: <code>你好！$&#123;name&#125;</code>, &#x2F;&#x2F; 邮件主题<br>        html: <code>可以使用html：&lt;h1 style=&#39;font-size:30px&#39;&gt;$&#123;code&#125;&lt;/h1&gt;</code> &#x2F;&#x2F; 发送内容<br>    };<br>    await transporter.sendMail(mailOptions, (error, info) &#x3D;&gt; {<br>        if (error) {<br>            return console.log(error);<br>        }<br>        console.log(<code>给$&#123;name&#125;发了一封邮件，得得</code>);<br>    });<br>    return null<br>}</p><p>module.exports &#x3D; sendEmail</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%EF%BC%88node%EF%BC%89%20nodemailer%20outlook%E9%82%AE%E7%AE%B1%20node-canvas%20echarts%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E5%9B%BE%E8%A1%A8%E8%BD%AC%E6%88%90base64%E5%9B%BE%E7%89%87%E4%BB%A5%E9%82%AE%E4%BB%B6%E5%BD%A2%E5%BC%8F%E5%8F%91%E9%80%81/"/>
      <url>/2023/05/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%EF%BC%88node%EF%BC%89%20nodemailer%20outlook%E9%82%AE%E7%AE%B1%20node-canvas%20echarts%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E5%9B%BE%E8%A1%A8%E8%BD%AC%E6%88%90base64%E5%9B%BE%E7%89%87%E4%BB%A5%E9%82%AE%E4%BB%B6%E5%BD%A2%E5%BC%8F%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">generateLineImage</span> (<span class="params">myTitle, myLegend, data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">            text: myTitle,</span><br><span class="line">            left: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">            bottom: <span class="number">0</span>,</span><br><span class="line">            data: myLegend</span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">            left: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">            right: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">            bottom: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            containLabel: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                rotate: <span class="number">30</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: DIProject</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">            type: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: myLegend[<span class="number">0</span>],</span><br><span class="line">                type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                label: &#123; show: <span class="literal">true</span> &#125;,</span><br><span class="line">                data: data.map(v =&gt; v[<span class="number">0</span>])</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: myLegend[<span class="number">1</span>],</span><br><span class="line">                type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                label: &#123; show: <span class="literal">true</span> &#125;,</span><br><span class="line">                data: data.map(v =&gt; v[<span class="number">1</span>])</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: myLegend[<span class="number">2</span>],</span><br><span class="line">                type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                label: &#123; show: <span class="literal">true</span> &#125;,</span><br><span class="line">                data: data.map(v =&gt; v[<span class="number">2</span>])</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: myLegend[<span class="number">3</span>],</span><br><span class="line">                type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                label: &#123; show: <span class="literal">true</span> &#125;,</span><br><span class="line">                data: data.map(v =&gt; v[<span class="number">3</span>])</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> canvas = createCanvas(<span class="number">750</span>, <span class="number">350</span>) <span class="comment">// 750 320的canvas</span></span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    ctx.font = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    echarts.setCanvasCreator(() =&gt; canvas) <span class="comment">// 使用node-canvas</span></span><br><span class="line">    <span class="keyword">const</span> chart = echarts.<span class="keyword">init</span>(canvas)</span><br><span class="line">    chart.setOption(options) <span class="comment">// 就是echarts的options</span></span><br><span class="line">    <span class="keyword">return</span> `data:image/png;base64,$&#123;chart.getDom().toBuffer().toString(<span class="string">&#x27;base64&#x27;</span>)&#125;` <span class="comment">// 返回base64图片</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E7%90%86%E8%A7%A3nodejs%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/05/17/%E7%90%86%E8%A7%A3nodejs%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>nodejs的一轮事件循环包含六个阶段：</p><p><strong>timer</strong>：执行所有的setTimeout setInterval回调；</p><p><strong>I&#x2F;O callbacks</strong>：执行除了timer的回调和check阶段调用的回调；</p><p>idle（空转）：node内部执行；</p><p><strong>poll</strong>：轮询阶段 检索新的I&#x2F;O事件；</p><p>进入到poll阶段以后，<br>如果没设置timer：<br>    如果poll queue不为空，event loop将同步执行queue里面的回调，直到poll queue为空，<br>    当poll queue为空时：<br>        如果设定了setImmeadiate，poll queue将进入check阶段；<br>        如果没设定setImmeadiate,则会阻塞在poll queue阶段；poll会一直等待新的回调进入，一旦到达<br>        立即执行；</p><p>设置了timer：<br>    poll进入空闲阶，event loop 会去检查timer，如果有一个或多个timer到了时间，event loop将会进入下一次循环 按顺序执行timer queue；</p><p>check：执行setImmeadiate 回调；</p><p>close callback：关闭函数；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/2021%E7%9C%9F%E9%A2%98/"/>
      <url>/2023/05/17/2021%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/qduanxq/p/15072640.html?ivk_sa=1024320u">https://www.cnblogs.com/qduanxq/p/15072640.html?ivk_sa=1024320u</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/JWT%E9%89%B4%E6%9D%83/"/>
      <url>/2023/05/17/JWT%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210617133015345.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/20210617133015569.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/20210617133015764.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/20210617133015928.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/2021061713301666.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yWmFjaGFyeV96bGM=,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%5B%E6%B2%B3%E5%86%85%E5%A1%94%5D%E6%B1%89%E8%AF%BA%E5%A1%94%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/05/17/%5B%E6%B2%B3%E5%86%85%E5%A1%94%5D%E6%B1%89%E8%AF%BA%E5%A1%94%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hanoi</span> (n, <span class="keyword">from</span>, to, spare) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="keyword">from</span>&#125;</span> =&gt; <span class="subst">$&#123;to&#125;</span>`</span>) &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">hanoi</span>(n-<span class="number">1</span>, <span class="keyword">from</span>, spare, to) <span class="comment">// 除最底下的大圆盘把其他移动到备用柱</span></span><br><span class="line">        <span class="title function_">hanoi</span>(<span class="number">1</span>, <span class="keyword">from</span>, to, spare) <span class="comment">// 把最底下的大圆盘移动到目标柱</span></span><br><span class="line">        <span class="title function_">hanoi</span>(n-<span class="number">1</span>, spare, to, <span class="keyword">from</span>) <span class="comment">// 再把备用柱上的圆盘移动到目标柱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hanoi</span>(<span class="number">3</span>, <span class="string">&#x27;起始柱&#x27;</span>, <span class="string">&#x27;目标柱&#x27;</span>, <span class="string">&#x27;备用柱&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/js%20%E9%A2%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>/2023/05/17/js%20%E9%A2%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>预编译：<br>1.创建执行期上下文内部作用域AO对象（创建作用域）；<br>2.查找作用域下可用的行参和变量作为AO对象的属性；<br>3.统一实参和行参；<br>4.查找作用域下的函数声明，如果函数名和变量或行参名一致的话，则覆盖；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/linux%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/05/17/linux%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>bin：二进制可执行文件<br><strong>特别说明</strong>：bin是一个链接文件夹，指向usr中的bin文件夹</p></blockquote><blockquote><p>sbin：系统二进制可执行文件，管理员命令<br><strong>特别说明</strong>：sbin是一个链接文件夹，也指向usr中的bin文件夹</p></blockquote><blockquote><p>lib&#x2F;lib64：库目录 动态库链接 系统和应用程序共享的库文件 &#x3D; win系统的systom32<br><strong>特别说明</strong>：lib&#x2F;lib64是一个链接文件夹，也指向usr中的bin文件夹</p></blockquote><blockquote><p>boot: 引导分区、保存挂载信息的文件夹，单独分区存储</p></blockquote><blockquote><p>dev: 硬件设备目录，保存硬件设备映射信息；</p></blockquote><blockquote><p>etc: 系统运行的配置文件；</p></blockquote><blockquote><p>home: 系统下各个普通用户配置文件；</p></blockquote><blockquote><p>root: 管理员配置文件；</p></blockquote><blockquote><p>opt:可选目录，第三方软件包存储；</p></blockquote><blockquote><p>media:可识别媒体设备，光驱、可移动硬盘等；</p></blockquote><blockquote><p>mnt: 移动设备的另一个挂载点，跟media类似的；</p></blockquote><blockquote><p>proc:系统进程映射；</p></blockquote><blockquote><p>run:临时文件系统，重启消失；</p></blockquote><blockquote><p>srv：  系统服务相关；</p></blockquote><blockquote><p>sys：系统硬件相关信息；</p></blockquote><blockquote><p>tmp: 临时文件目录；</p></blockquote><blockquote><p>usr:用户相关操作配置程序；</p></blockquote><blockquote><p>var:存储经常修改的文件，如日志log 缓存信息等等</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/liunx%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89/"/>
      <url>/2023/05/17/liunx%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>1、文件和文件夹操作</strong><br>1.pwd 绝对路径或当前工作路径；-P 可以抛开软连接；<br>2.cd -  最近两个路径之间反复横跳；-P 可以抛开软连接；<br>3.ls -a 把隐藏文件一起列出来；-l 列成一行；<br>4.mkdir A ： 创建文件夹 A   可以连续创建 mkdir A A&#x2F;B ；<br>5.touch 文件名或路径+文件名；  创建文件；<br>6.cp<br>– 复制文件到某个文件夹。cp 文件 目标文件夹路径；<br>– 复制某个文件到某个文件夹下并覆盖原来的文件； cp 文件 要替换的目标文件；<br>– 复制文件夹及其内容。cp -r 文件夹 目标文件夹<br>7.rm -rf 删除。删库跑路 指令<strong>rm -rf &#x2F;</strong>*<br>8.mv  文件A 文件B；<br>–移动目标文件到目标位置；<br>–重命名文件</p><p><strong>2、查看&#x2F;操作文件和文件夹命令</strong><br>1.cat -n（行号） ：适用内容少的文件<br>2.more 文件：相对展示更丰富；<br>3.less 文件  ：分屏、超大文件和快捷信息更全面，比window打开快；<br>4.echo -e 内容<br>–输出内容到控制台 -e 支持转译符；<br>–echo $ 可以查看所有的环境变量；echo $PATH<br>5.  &gt;      : 输出重定向. 替换全部内容，echo -e ‘全部替换’ &gt; config;<br>6.  &gt;&gt;    : 追加内容;  echo ‘alias’ &gt;&gt; config<br>7. head&#x2F;tail  文件名；<br>–  -n 10 输出头&#x2F;尾的10行内容；<br>– -f监控文件内容变化 tail -f 文件A 并输出 ctrl s 暂停 ctrl q 继续；<br>9. ln -s 文件或目录。 创建软连接；不加-s就是硬连接 跟inode中的索引有关系有关；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90Javascript%20%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%B2%BE%E7%A1%AE%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F%E3%80%91/"/>
      <url>/2023/05/17/%E3%80%90Javascript%20%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%B2%BE%E7%A1%AE%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F%E3%80%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">accAdd</span> (arg1, arg2) &#123;</span><br><span class="line"><span class="keyword">let</span> g1 , g2, m</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">g1 = arg1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>].<span class="property">length</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">g1 = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">g2 = arg2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>].<span class="property">length</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">g2 = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">m = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(g1, g2))</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">parseInt</span>(arg1 * m, <span class="number">10</span>) + <span class="built_in">parseInt</span>(arg2 * m , <span class="number">10</span>) / m</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">accAdd</span>(<span class="number">0.1</span>, <span class="number">0.02</span>) <span class="comment">// 0.12</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.02</span> <span class="comment">// 0.12000000000000001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90sleep%E5%87%BD%E6%95%B0%20%E6%89%8B%E5%86%99%E7%BA%A2%E7%BB%BF%E7%81%AF%E3%80%91/"/>
      <url>/2023/05/17/%E3%80%90sleep%E5%87%BD%E6%95%B0%20%E6%89%8B%E5%86%99%E7%BA%A2%E7%BB%BF%E7%81%AF%E3%80%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写红灯 2s红灯 1s黄灯 3s绿灯</span></span><br><span class="line"><span class="comment">// 1.采用setTimeout嵌套；</span></span><br><span class="line"><span class="comment">// 2.如下方式promise + async/await</span></span><br><span class="line"><span class="comment">// 3.generater函数方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">t</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, t))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>( <span class="number">2</span>* <span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>( <span class="number">1</span>* <span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>( <span class="number">3</span>* <span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">start</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90%E5%8D%83%E5%88%86%E5%88%B6%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%97%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%91%E6%83%B3%E9%94%99%E4%BA%86%EF%BC%8C%E5%85%A5%E5%8F%82%E5%BA%94%E8%AF%A5%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E6%98%AF%E6%95%B0%E5%AD%97~%E5%85%88%E4%BF%9D%E5%AD%98%E4%B8%80%E4%B8%8B%E5%90%A7/"/>
      <url>/2023/05/17/%E3%80%90%E5%8D%83%E5%88%86%E5%88%B6%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%97%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%91%E6%83%B3%E9%94%99%E4%BA%86%EF%BC%8C%E5%85%A5%E5%8F%82%E5%BA%94%E8%AF%A5%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E6%98%AF%E6%95%B0%E5%AD%97~%E5%85%88%E4%BF%9D%E5%AD%98%E4%B8%80%E4%B8%8B%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p>function getThousandStr(num) {<br>    &#x2F;&#x2F; if(typeof num &#x3D;&#x3D;&#x3D; ‘number’) throw new Error(‘要求处理数字哦~’)<br>    let intArr &#x3D; num.toString().split(‘.’)[0].split(‘’)<br>    let myFloat &#x3D; num.toString().split(‘.’)[1]<br>    let target &#x3D; []</p><pre><code>while(intArr.length &gt; 3) &#123;    target.unshift(intArr.splice(-3).join(&#39;&#39;))&#125;return `$&#123;intArr.join(&#39;&#39;)&#125;,$&#123;target.join(&#39;,&#39;)&#125;.$&#123;myFloat&#125;` - 0</code></pre><p>}<br>getThousandStr(312312312.901111)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90%E6%97%A0%E6%A0%87%E9%A2%98%E3%80%91/"/>
      <url>/2023/05/17/%E3%80%90%E6%97%A0%E6%A0%87%E9%A2%98%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="liunx-命令"><a href="#liunx-命令" class="headerlink" title="liunx 命令"></a>liunx 命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">编辑模式：</span><br><span class="line">vim命令</span><br><span class="line">:w  写入；</span><br><span class="line">:q  退出；</span><br><span class="line">u  撤销编辑；</span><br><span class="line">插入模式的几种方式：i    o   a  / shift + i    o   a</span><br><span class="line"></span><br><span class="line">一般模式：</span><br><span class="line">--整行操作-</span><br><span class="line">复制：单行 y  ； 多行 n yy  如复制8行 ：8yy；</span><br><span class="line">粘贴：粘贴1次 p ； 粘贴多次：np 如 8p； </span><br><span class="line">删除：dd 或 8dd</span><br><span class="line">u  撤销编辑；</span><br><span class="line"></span><br><span class="line">操作某行部分内容</span><br><span class="line">y$: 复制光标后面的部分；</span><br><span class="line">y^: 复制光标前面的部分；</span><br><span class="line">yw：复制单词；</span><br><span class="line">dw：删除单词（光标放到某个单词的位置）；</span><br><span class="line">p：粘贴；</span><br><span class="line">x：剪切光标位置字母；</span><br><span class="line">r：替换一个单词；</span><br><span class="line">R：持续替换；</span><br><span class="line"></span><br><span class="line">操作光标位置：</span><br><span class="line">w：一个单词一个单词往下跳 跳到词首；</span><br><span class="line">e：一个单词一个单词往下跳 跳到词尾；</span><br><span class="line">b：往回跳；</span><br><span class="line">页头：jj；</span><br><span class="line">页尾：shift   J或L</span><br><span class="line">跳转指定行：shift 8 j</span><br><span class="line">显示行号：：set nu</span><br><span class="line"></span><br><span class="line">命令模式：</span><br><span class="line">:wq</span><br><span class="line">:q!</span><br><span class="line">:q</span><br><span class="line">:set nu / nonu</span><br><span class="line">查找：/关键字  向下查找 n  / 向上shift + n </span><br><span class="line">查找并替换所有：:%s/old/new/g</span><br></pre></td></tr></table></figure><p>vim编辑器键盘图<br><img src="https://img-blog.csdnimg.cn/deb1317dcf3d4df4927d7d1d3e78626d.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E6%AD%A3%E5%88%99%E3%80%91/"/>
      <url>/2023/05/17/%E3%80%90%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E6%AD%A3%E5%88%99%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F; 特殊字符&amp;表情<br>const regEn &#x3D; &#x2F;[&#96;~!@#$%^&amp;*()_+&lt;&gt;?:”{},./;’[]]&#x2F;im;<br>const regCn &#x3D; &#x2F;[·！#￥（——）：；“”‘、，|《。》？、【】[]]&#x2F;im;<br>const regEmoji &#x3D; &#x2F;[\uD800-\uDBFF][\uDC00-\uDFFF]&#x2F;;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90%E7%AE%80%E5%8C%96loadsh%E4%B8%AD%E7%9A%84debounce%E3%80%91/"/>
      <url>/2023/05/17/%E3%80%90%E7%AE%80%E5%8C%96loadsh%E4%B8%AD%E7%9A%84debounce%E3%80%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait,imm = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> debounced = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout) <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        <span class="keyword">const</span> content = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span></span><br><span class="line">        <span class="keyword">if</span>(imm) &#123;</span><br><span class="line">            <span class="keyword">let</span> flag = !timeout</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span></span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span>(flag) fn.<span class="title function_">apply</span>(content, args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">              fn.<span class="title function_">apply</span>(content, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E4%B8%8D%E9%87%8D%E5%A4%8Dtag%E3%80%91/"/>
      <url>/2023/05/17/%E3%80%90%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E4%B8%8D%E9%87%8D%E5%A4%8Dtag%E3%80%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUniqueTag</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rt = [...root]</span><br><span class="line">    </span><br><span class="line">    rt.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!result.<span class="title function_">includes</span>(item.<span class="property">tagName</span>)) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(item.<span class="property">tagName</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(item.<span class="property">children</span> &amp;&amp; (<span class="number">0</span> <span class="keyword">in</span> item.<span class="property">children</span>)) &#123;</span><br><span class="line">            <span class="title function_">getUniqueTag</span>(item.<span class="property">children</span>)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const arr = [</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         tagName:&#x27;div1&#x27;,</span></span><br><span class="line"><span class="comment">//         children:[</span></span><br><span class="line"><span class="comment">//             &#123;tagName:&#x27;div4&#x27;,&#125;</span></span><br><span class="line"><span class="comment">//         ]</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         tagName:&#x27;div2&#x27;,</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         tagName:&#x27;div3&#x27;,</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.子集递归查找；</span></span><br><span class="line"><span class="comment">// 2.判断不同；</span></span><br><span class="line"><span class="comment">// 3.返回结果;</span></span><br><span class="line"><span class="comment">// 4.先判断children 还是先存储tag</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">getUniqueTag</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E3%80%90%E8%B7%A8%E4%BB%93%E5%BA%93%E5%90%88%E5%B9%B6%E4%BB%A3%E7%A0%81%E3%80%91%E4%BB%93%E5%BA%93A%E5%90%88%E5%B9%B6%E4%BB%93%E5%BA%93B%E4%B8%AD%E6%9C%80%E6%96%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%8C%E4%B8%94%E4%B8%8D%E8%A6%86%E7%9B%96%E4%BB%93%E5%BA%93B%E7%9A%84%E6%8F%90%E4%BA%A4%E6%A0%91/"/>
      <url>/2023/05/17/%E3%80%90%E8%B7%A8%E4%BB%93%E5%BA%93%E5%90%88%E5%B9%B6%E4%BB%A3%E7%A0%81%E3%80%91%E4%BB%93%E5%BA%93A%E5%90%88%E5%B9%B6%E4%BB%93%E5%BA%93B%E4%B8%AD%E6%9C%80%E6%96%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%8C%E4%B8%94%E4%B8%8D%E8%A6%86%E7%9B%96%E4%BB%93%E5%BA%93B%E7%9A%84%E6%8F%90%E4%BA%A4%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>1、分别拉取仓库1和仓库2：</p><p>2、项目1中完成需求并提交内容；</p><p>3、在项目2终端中执行：</p><pre><code>a.添加wiser的remote地址到elko项目中：    git remote add wiser ssh://git@xxx/uiid1 （wiser 是添加到git config中的别名）；b.拉取最新的wiser代码到elko项目中：    git fetch wiser；c.基于wiser/develop分支检出一个temp分支到elko项目中：    git checkout -b temp wiser/developd.切回到elko项目的最新分支（develop）；e.执行夸仓库合并命令：（允许跨仓库合并：--allow-unrelated-histories ）    git merge --no-ff temp --allow-unrelated-historiesf.解决冲突后提交，elko面板同步wiser需求内容完成；</code></pre><p>﻿</p><p>4、特别注意：</p><pre><code>a.git配置不会被提交，clone的时候，需要重新添加remote地址；b.本地媒介分支即使清除，不要提交到仓库里面；c.命令较长，可以结合.gitconfig的alias 一起使用：   open ~/.gitconfig   [alias] 里面贴入如下内容：（没有alias在问价下面加一下）d.执行一下：source ~/.bash.profile 就好了（不行的话再重启下IDE）；e.执行：    git auh1 ssh://git@xxx/uiid1 （把wiser的仓库地址贴过来）    git auh2    git auh3    git auh4         （不是develop的话全称切一下）    git auh5           </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%E7%B4%A2%E5%BC%95/"/>
      <url>/2023/05/17/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>function search(arr, target) {<br>    let start &#x3D; 0, end &#x3D; arr.length - 1, middle<br>    while(start &lt;&#x3D; end) {<br>        middle &#x3D; Math.floor((start + end) &#x2F; 2)<br>        if(arr[middle] &#x3D;&#x3D;&#x3D; target) {<br>            return middle<br>        } else if(arr[middle] &lt; target) {<br>            start &#x3D; middle + 1<br>        } else {<br>            end &#x3D; middle - 1<br>        }<br>    }<br>}</p><p>console.log(search([1,3,7,8,10,23,54,67], 3))<br>&#x2F;&#x2F; 1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20async%20%E5%87%BD%E6%95%B0/"/>
      <url>/2023/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20async%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>实现一个 async 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">async</span> (genertor) &#123;</span><br><span class="line">    <span class="keyword">let</span> iterator = <span class="title function_">genertor</span>()</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">lastResult</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;done, value&#125; = lastResult</span><br><span class="line">        <span class="keyword">if</span>(done) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">handle</span>(iterator.<span class="title function_">next</span>(res))</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                 iterator.<span class="keyword">throw</span>(e)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;iterator is not a Promise&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handle</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async</span>(<span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,res1)</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res1 + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>,res2)</span><br><span class="line">    <span class="keyword">const</span> res3 = <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res2 + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>,res3)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----输出</span></span><br><span class="line"><span class="comment">// 1 1</span></span><br><span class="line"><span class="comment">// 2 2</span></span><br><span class="line"><span class="comment">// 3 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/%E7%94%A8100%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%8A%8APromise%E3%80%81Promise.all%E3%80%81Promise.race%E3%80%81Promise.finally%E6%BA%90%E7%A0%81%E5%A4%A7%E6%B3%95%E7%82%BC%E6%88%90%EF%BD%9E/"/>
      <url>/2023/05/17/%E7%94%A8100%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%8A%8APromise%E3%80%81Promise.all%E3%80%81Promise.race%E3%80%81Promise.finally%E6%BA%90%E7%A0%81%E5%A4%A7%E6%B3%95%E7%82%BC%E6%88%90%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">class MyPromise &#123;</span><br><span class="line">    static PENDING = &#x27;pending&#x27;</span><br><span class="line">    static FULLFILLED = &#x27;fullfilled&#x27;</span><br><span class="line">    static REJECTED = &#x27;rejected&#x27;</span><br><span class="line"></span><br><span class="line">    constructor(fn) &#123;</span><br><span class="line">        this.status = &#x27;pending&#x27;</span><br><span class="line">        this.result = null</span><br><span class="line">        this.resolveCbs = []</span><br><span class="line">        this.rejectCbs = []</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            fn(this.resolve.bind(this), this.reject.bind(this))</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            this.reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(d) &#123;</span><br><span class="line">        setTimeout(_ =&gt; &#123;</span><br><span class="line">            if (this.status === MyPromise.PENDING) &#123;</span><br><span class="line">                this.status = MyPromise.FULLFILLED</span><br><span class="line">                this.result = d</span><br><span class="line">            &#125;</span><br><span class="line">            while (this.resolveCbs.length) this.resolveCbs.shift()()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    reject(e) &#123;</span><br><span class="line">        setTimeout(_ =&gt; &#123;</span><br><span class="line">            if (this.status === MyPromise.PENDING) &#123;</span><br><span class="line">                this.status = MyPromise.REJECTED</span><br><span class="line">                this.result = e</span><br><span class="line">            &#125;</span><br><span class="line">            while (this.rejectCbs.length) this.rejectCbs.shift()()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    then(onFullfilled, onRejected) &#123;</span><br><span class="line">        return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            if (this.status === MyPromise.PEDNING) &#123;</span><br><span class="line">                this.resolveCbs.push(onFullfilled)</span><br><span class="line">                this.rejectCbs.push(onRejected)</span><br><span class="line">            &#125;</span><br><span class="line">            if (this.status === MyPromise.REJECTED) &#123;</span><br><span class="line">                onFullfilled(this.result);</span><br><span class="line">            &#125;</span><br><span class="line">            if (this.status === MyPromise.REJECTED) &#123;</span><br><span class="line">                onRejected(this.result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    catch(e) &#123;</span><br><span class="line">        return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static resolve(val) &#123;</span><br><span class="line">        if (arg instanceof MyPromise) return val</span><br><span class="line">        return new MyPromise(resolve =&gt; resolve(val))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static all(iterator) &#123;</span><br><span class="line">        return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            const iter = Array.from(iterator)</span><br><span class="line">            let len = count = iter.length</span><br><span class="line">            const promises = []</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">                    count--</span><br><span class="line">                    MyPromise.resolve(iter[i]).then(res =&gt; &#123;</span><br><span class="line">                        promises.push(res)</span><br><span class="line">                    &#125;, err =&gt; &#123;</span><br><span class="line">                        promises.push(err)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    if (count === 0) &#123;</span><br><span class="line">                        resolve(promises)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">                reject(new Error(`$&#123;count&#125;-$&#123;e&#125;`))</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static race(iterator) &#123;</span><br><span class="line">        return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            const arr = Array.from(iterator)</span><br><span class="line">            const len = arr.length</span><br><span class="line">            try &#123;</span><br><span class="line">                for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">                    MyPromise.resolve(arr[i]).then(res =&gt; &#123;</span><br><span class="line">                        resolve(res)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">                reject(new Error(`$&#123;count&#125;-$&#123;e&#125;`))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static finally(promise) &#123;</span><br><span class="line">        return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">            MyPromise.resolve(promise).then(res =&gt; resolve(res)).catch(e =&gt; reject(e))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const p1 = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(true)</span><br><span class="line">    // reject(false)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const p2 = new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(true)</span><br><span class="line">    // reject(false)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(res =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// MyPromise.all(, mp2).then(res =&gt; &#123;</span><br><span class="line">//     [res1, res2, ...]</span><br><span class="line">// &#125;, err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">// &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%EF%BC%88%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5%E3%80%81%E8%81%9A%E5%90%88%E5%8F%8A%E5%88%86%E7%BB%84%E3%80%81%E8%A1%A8%E8%BF%9E%E6%8E%A5%EF%BC%89/"/>
      <url>/2023/05/17/SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%EF%BC%88%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5%E3%80%81%E8%81%9A%E5%90%88%E5%8F%8A%E5%88%86%E7%BB%84%E3%80%81%E8%A1%A8%E8%BF%9E%E6%8E%A5%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>(注意：查询编辑控件可以使用选中执行 ，命令有：select update delete  )</p><p>一、基础查询语法：</p><p>1.基本使用方法：</p><pre><code>    select  *（列名） from  chart（表名） where name=&#39;张三&#39;（条件）</code></pre><p>2.模糊查询及逻辑关系：</p><pre><code>    select  *  from  chart  where name like &#39;张%&#39; and sex=&#39;&#39;男</code></pre><p>3.添加别名：(as 可以省略)</p><pre><code>select  name as 姓名 ，sex as 性别 ，邮件=email  from  chart  (两种方式)</code></pre><p>4.合并列输出：</p><pre><code>select  name + &#39;:&#39;+ sex as 个人信息  from  chart  </code></pre><p>5.查询空行空值：</p><pre><code>select  *  from  chart  where name is null or name= &#39;&#39;</code></pre><p>6.使用别名：</p><pre><code>select  d.* from  chart d </code></pre><p>7.常量列查询：</p><pre><code>select  &#39;浙江省&#39; as 学校 from  chart</code></pre><p>8.限制条数返回：</p><pre><code>select  top 5 * as 学校 from  chart</code></pre><p>9.限制百分比返回：</p><pre><code>select  top 20 percent * as 学校 from  chart</code></pre><p>10.排序和多列排序：（默认升序）</p><pre><code>select * from  chart order by age asc   升序select * from  chart order by age desc  降序select * from  chart order by age asc, high desc  升序</code></pre><p>二、子查询语法 子查询给父查询建立查询条件</p><p>1.分页查询：第二页的五条数据   not in  排除<br>    select top 5 * from chart  where age not in (select top 5 age from chart)<br>2.&gt; &lt; 等 使用<br>    select * from chart  where age &gt; (select age from chart  where name&#x3D;’张三’)<br>三、聚合函数和分组查询(sql 有一些常用内置函数，日期 等等)<br>1.sum()<br>2.avg()<br>3.max()<br>4.min()<br>5.count()</p><p>6.分组查询：group by<br>7.分组筛选：having<br>8.where、group by 、having执行顺序：<br>where  依托于from子句制定操作产生的行；<br>group by 依托于where子句筛选后产生的行<br>having 依托于分组后产生的行尽心再次筛选；</p><p>四、表连接<br>(<br>内连接：两张表共有的数据才会输出<br>外连接：以某张彪为基准，数据都会显示，如果没有对应的数据，显示为null<br>左右外连接的区别是：以谁（join的左右）为基准<br>)</p><p>1.内连接：inner join</p><p>语法a：<br>    select r.id,r.name,m.age from result r inner join my_list m on r.id &#x3D; m.id</p><p>语法b：<br>    select r.id,r.name,l.age from result r ,my_list l where r.id &#x3D; l.id</p><p>多表联查：<br>    select r.id,r.name,m.age from result r<br>        inner join my_list m on r.id &#x3D; m.id<br>        inner join your_list y on r.id &#x3D; y.id<br>        …</p><p>2.（左、右）外连接：left join   、  right join</p><pre><code>select r.id,r.name,m.age from result r     left join my_list m on r.id = m.id</code></pre><p>(说明：此时是以results表为准，逐条匹配，否则用null填充，null可以改成其他状态，自己查吧)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/javaScript%E7%9A%84%20this%E7%BB%91%E5%AE%9A%E5%88%86%E6%9E%90/"/>
      <url>/2023/05/17/javaScript%E7%9A%84%20this%E7%BB%91%E5%AE%9A%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>注意：js中的this指向是根据执行上下文来确定的：</p><p>绝大多数情况：</p><p>1.全局执行上下文： this 指向widnow ,严格模式下指向undefied </p><p>2.函数执行上下文： </p><p>默认绑定： 函数调用时无前缀，默认this 指向widnow ,严格模式下指向undefied<br>注意：严格模式下调用不在严格模式中的函数，并不会影响this指向；</p><p>隐式绑定：如果函数调用时，前面存在调用它的对象，那么this就会隐式绑定到这个对象上<br>    注意1：如果函数调用前存在多个对象，this指向距离调用自己最近的对象；<br>    注意2：隐式丢失，最常见的情况是当作参数传递以及变量赋值时发生；</p><p>显示绑定：通过apply、call、bind显示改变；<br>注意：指向参数提供的是null或者undefined，那么 this 将指向全局对象。</p><p>new绑定： new出来的新实例；</p><p>this 绑定优先级问题：</p><p>显式绑定 &gt; 隐式绑定 &gt; 默认绑定<br>new绑定 &gt; 隐式绑定 &gt; 默认绑定</p><p>为什么显式绑定不和new绑定比较呢？因为不存在这种绑定同时生效的情景，如果同时写这两种代码会直接抛错.</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>单独拎出来：<br>箭头函数：箭头函数的this指向取决于外层作用域中的this，外层作用域或函数的this指向谁，箭头函数中的this便指向谁,并且一旦箭头函数的this绑定成功，也无法被再次修改，有点硬绑定的意思</p><p>感谢大神连接，参考链接：<a href="https://www.cnblogs.com/echolun/p/11962610.html%EF%BC%9B">https://www.cnblogs.com/echolun/p/11962610.html；</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
